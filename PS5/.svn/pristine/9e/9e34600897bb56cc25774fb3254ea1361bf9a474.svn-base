using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SS;
using SpreadsheetUtilities;
using System.Collections.Generic;

namespace SpreadsheetTests
{
    /// <summary>
    /// Test class for PS5. NEED TO COPY OVER RELEVANT TESTS FROM PS4. I assume
    /// that the implementation of PS4 used in Spreadsheet passes 100% of the grading tests for PS4,
    /// which is true because I have made all necessary corrections to my PS4 assignment. 
    /// </summary>
    /// <author>Basil Vetas</author>
    /// <date>10-6-2014</date>
    [TestClass]
    public class SpreadsheetTests
    {
        /// <summary>
        ///     Tests if all the constructors work. This test simply assumes that an error will
        ///     not be thrown for any of the constructors.
        /// </summary>
        [TestMethod]
        public void TestMethod0()
        {
            AbstractSpreadsheet sheet1 = new Spreadsheet();
            AbstractSpreadsheet sheet2 = new Spreadsheet(s => true, s => s.ToUpper(), "1.0");
            //AbstractSpreadsheet sheet3 = new Spreadsheet(PathToFile, s => true, s => s.ToUpper(), "1.0");            
        }

        // --------- Exception Tests ------------ //

        /// <summary>
        ///     Tests if cell name for GetCellValue is null
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod1()
        {
            Spreadsheet sheet = new Spreadsheet();
            sheet.GetCellValue(null);
        }

        /// <summary>
        ///     Tests if cell name for GetCellValue is invalid
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod2()
        {
            Spreadsheet sheet = new Spreadsheet();
            object value = sheet.GetCellValue("1$#*&%1");
        }

        /// <summary>
        ///     Tests SetContentsOfCell for a null content parameter
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void TestMethod7()
        {
            Spreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", null);
        }

        /// <summary>
        ///     Tests SetContentsOfCell for a null name parameter
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod8()
        {
            Spreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell(null, "hello");
        }

        /// <summary>
        ///     Tests SetContentsOfCell for an invalid name parameter
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod9()
        {
            Spreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("1111111", "hello");
        }

        /// <summary>
        ///     Tests SetContentsOfCell for an invalid formula exception
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(FormulaFormatException))]
        public void TestMethod10()
        {
            Spreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", "=$%^302045 ++ 2)");
        }

        /// <summary>
        ///     Tests SetContentsOfCell for an invalid formula exception
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(CircularException))]
        public void TestMethod11()
        {
            Spreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", "=A1");
        }

        /// <summary>
        ///     Tests GetCellValue, expected a double given a double.
        ///     Also tests SetContentsOfCell given a double (as a string).
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod14()
        {
            Spreadsheet sheet = new Spreadsheet(s => false, s => s.ToUpper(), "default");
            sheet.SetContentsOfCell("A1", "5");
            object value = sheet.GetCellValue("A1");
            Assert.AreEqual(5.0, value);
        }

        /// <summary>
        ///     Tests GetCellValue, expected a double given a double.
        ///     Also tests SetContentsOfCell given a double (as a string).
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(FormulaFormatException))]
        public void TestMethod15()
        {
            Spreadsheet sheet = new Spreadsheet(check_var, s => s.ToUpper(), "default");
            sheet.SetContentsOfCell("A1", "=B1");
            sheet.SetContentsOfCell("B1", "5");
            object value = sheet.GetCellValue("A1");
            Assert.AreEqual(5.0, value);
        }
        
        bool valid = true;

        /// <summary>
        ///     helper delegate method
        /// </summary>
        /// <param name="s"></param>
        /// <returns></returns>
        public bool check_var(string s)
        {
            // will switch off each time if it is true or false
            if (valid)
            {
                valid = false;
                return true;
            }
            else return false;
            
        }

        ///<summary>
        ///     Tests when we try to save a spreadsheet to a null filepath location
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(SpreadsheetReadWriteException))]
        public void TestMethod17()
        {
            Spreadsheet sheet = new Spreadsheet(s => true, s => s, "2.0");
            sheet.SetContentsOfCell("D1", "1");
            sheet.SetContentsOfCell("E1", "1");
            sheet.SetContentsOfCell("F1", "3");
            sheet.SetContentsOfCell("B1", "=D1 + E1");
            sheet.SetContentsOfCell("C1", "=F1");
            sheet.SetContentsOfCell("A1", "=B1 + C1");
            sheet.Save(null);
        }

        ///<summary>
        ///     Tests when we try to save a spreadsheet to an empty filepath location
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(SpreadsheetReadWriteException))]
        public void TestMethod18()
        {
            Spreadsheet sheet = new Spreadsheet(s => true, s => s, "2.0");
            sheet.SetContentsOfCell("D1", "1");
            sheet.SetContentsOfCell("E1", "1");
            sheet.SetContentsOfCell("F1", "3");
            sheet.SetContentsOfCell("B1", "=D1 + E1");
            sheet.SetContentsOfCell("C1", "=F1");
            sheet.SetContentsOfCell("A1", "=B1 + C1");
            sheet.Save("");
        }

        /// <summary>
        ///     Tests when we try to read a spreadsheet from a null filepath location
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(SpreadsheetReadWriteException))]
        public void TestMethod19()
        {
            Spreadsheet sheet1 = new Spreadsheet(s => true, s => s, "2.0");
            sheet1.SetContentsOfCell("D1", "1");
            sheet1.SetContentsOfCell("E1", "1");
            sheet1.SetContentsOfCell("F1", "3");
            sheet1.SetContentsOfCell("B1", "=D1 + E1");
            sheet1.SetContentsOfCell("C1", "=F1");
            sheet1.SetContentsOfCell("A1", "=B1 + C1");
            sheet1.Save("C:\\Users\\Basil\\Desktop\\spreadsheet-test-1.xml");
            Spreadsheet sheet2 = new Spreadsheet();
            string version = sheet2.GetSavedVersion(null);            
        }

        /// <summary>
        ///     Tests when we try to read a spreadsheet from an empty filepath location
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(SpreadsheetReadWriteException))]
        public void TestMethod20()
        {
            Spreadsheet sheet1 = new Spreadsheet(s => true, s => s, "2.0");
            sheet1.SetContentsOfCell("D1", "1");
            sheet1.SetContentsOfCell("E1", "1");
            sheet1.SetContentsOfCell("F1", "3");
            sheet1.SetContentsOfCell("B1", "=D1 + E1");
            sheet1.SetContentsOfCell("C1", "=F1");
            sheet1.SetContentsOfCell("A1", "=B1 + C1");
            sheet1.Save("C:\\Users\\Basil\\Desktop\\spreadsheet-test-1.xml");
            Spreadsheet sheet2 = new Spreadsheet();
            string version = sheet2.GetSavedVersion("");            
        }

        /// <summary
        ///     Tries to get the saved version of a file that doesn not exist
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(SpreadsheetReadWriteException))]
        public void TestMethod44()
        {                    
            Spreadsheet sheet2 = new Spreadsheet();
            string version = sheet2.GetSavedVersion("C:\\Users\\Basil\\Desktop\\this-file-does-not-exist.xml");            
        }

        /// <summary
        ///     Tries to get saved version when file startes with a <cell> tag
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(SpreadsheetReadWriteException))]
        public void TestMethod45()
        {            
            Spreadsheet sheet2 = new Spreadsheet();
            string version = sheet2.GetSavedVersion("C:\\Users\\Basil\\Desktop\\bad-form-1.xml");                        
        }

        /// <summary
        ///     Tries to get saved version when file startes with a <name> tag
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(SpreadsheetReadWriteException))]
        public void TestMethod46()
        {
            Spreadsheet sheet2 = new Spreadsheet();            
            string version = sheet2.GetSavedVersion("C:\\Users\\Basil\\Desktop\\bad-form-2.xml");                        
        }

        /// <summary
        ///     Tries to get saved version when file startes with a <contents> tag
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(SpreadsheetReadWriteException))]
        public void TestMethod47()
        {
            Spreadsheet sheet2 = new Spreadsheet();            
            string version = sheet2.GetSavedVersion("C:\\Users\\Basil\\Desktop\\bad-form-3.xml");            
        }

        /// <summary>
        ///     Tries to save a file to a folder rather than a file (bad path name)
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(SpreadsheetReadWriteException))]
        public void TestMethod48()
        {
            Spreadsheet sheet1 = new Spreadsheet(s => true, s => s, "2.0");
            sheet1.SetContentsOfCell("D1", "1");
            sheet1.SetContentsOfCell("E1", "1");
            sheet1.SetContentsOfCell("F1", "3");
            sheet1.SetContentsOfCell("B1", "=D1 + E1");
            sheet1.SetContentsOfCell("C1", "=F1");
            sheet1.SetContentsOfCell("A1", "=B1 + C1");
            sheet1.Save("C:\\Users\\Basil\\Desktop\\");
        }

        /// <summary>
        ///     Tries to construct a new spreadsheet using a bad path name
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(SpreadsheetReadWriteException))]
        public void TestMethod49()
        {
            Spreadsheet sheet1 = new Spreadsheet("C:\\Users\\Basil\\Desktop\\", s => true, s => s, "2.0");             
        }

        // --------- Non-Exception Tests ------------ //

        /// <summary>
        ///     Tests GetCellValue, expects a string given a string.
        ///     Also tests SetContentsOfCell given a string.
        /// </summary>
        [TestMethod]
        public void TestMethod3()
        {
            Spreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", "hello");
            object value = sheet.GetCellValue("A1");
            Assert.AreEqual("hello", value);
        }

        /// <summary>
        ///     Tests GetCellValue, expected a double given a double.
        ///     Also tests SetContentsOfCell given a double (as a string).
        /// </summary>
        [TestMethod]
        public void TestMethod4()
        {
            Spreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", "5");
            object value = sheet.GetCellValue("A1");
            Assert.AreEqual(5.0, value);
        }

        /// <summary>
        ///     Tests GetCellValue, expects a double given a formula.
        ///     Also tests SetContentsOfCell given a formula (as a string).
        /// </summary>
        [TestMethod]
        public void TestMethod5()
        {
            Spreadsheet sheet = new Spreadsheet(s => true, s => s, "default");
            sheet.SetContentsOfCell("D1", "1");
            sheet.SetContentsOfCell("E1", "1");
            sheet.SetContentsOfCell("F1", "3");            
            sheet.SetContentsOfCell("B1", "=D1 + E1");
            sheet.SetContentsOfCell("C1", "=F1");
            sheet.SetContentsOfCell("A1", "=B1 + C1");
            object value = sheet.GetCellValue("A1");
            Assert.AreEqual(5.0, value);
        }

        /// <summary>
        ///     Tests GetCellValue, expects a SpreadsheetUtilities.FormulaError given a formula.
        ///     Also tests SetContentsOfCell given a formula (as a string). 
        /// </summary>
        [TestMethod]
        public void TestMethod6()
        {
            Spreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", "=B1 + C1");
            object value = sheet.GetCellValue("A1");
            Assert.IsInstanceOfType(value, typeof(FormulaError));
        }

        /// <summary>
        ///     Tests GetCellValue, expects a SpreadsheetUtilities.FormulaError given a formula.
        ///     Also tests SetContentsOfCell given a formula (as a string). 
        /// </summary>
        [TestMethod]
        public void TestMethod12()
        {
            Spreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("B1", "hello");
            sheet.SetContentsOfCell("A1", "=B1");
            object value = sheet.GetCellValue("A1");
            Assert.IsInstanceOfType(value, typeof(FormulaError));
        }

        /// <summary>
        ///     Tests GetCellValue, expects an empty string. Also test 'Changed' for empty constructor
        /// </summary>
        [TestMethod]
        public void TestMethod13()
        {
            Spreadsheet sheet = new Spreadsheet();
            Assert.AreEqual(sheet.Changed, false);
            object value = sheet.GetCellValue("A1");
            Assert.AreEqual("", value);
        }

        /// <summary>
        ///     Tests the save method (see Output). Should write a file that looks like:
        ///     
        ///     <spreadsheet version="2.0">
        ///      <cell>        
        ///       <name>D1</name>
        ///       <contents>1.0</contents>
        ///      </cell>
        ///      <cell>        
        ///       <name>E1</name>
        ///       <contents>1.0</contents>
        ///      </cell>
        ///      <cell>        
        ///       <name>F1</name>
        ///       <contents>3.0</contents>
        ///      </cell>
        ///      <cell>        
        ///       <name>B1</name>
        ///       <contents>=D1+E1</contents>
        ///      </cell>
        ///      <cell>        
        ///       <name>C1</name>
        ///       <contents>=F1</contents>
        ///      </cell>
        ///      <cell>        
        ///       <name>A1</name>
        ///       <contents>=B1+C1</contents>
        ///      </cell>
        ///     </spreadsheet>
        ///     
        ///     Also tests the GetSavedVersion method. 
        /// </summary>
        [TestMethod]
        public void TestMethod16()
        {
            Spreadsheet sheet1 = new Spreadsheet(s => true, s => s, "2.0");
            sheet1.SetContentsOfCell("G1", "hello world");
            sheet1.SetContentsOfCell("D1", "1");
            sheet1.SetContentsOfCell("E1", "1");
            sheet1.SetContentsOfCell("F1", "3");
            sheet1.SetContentsOfCell("B1", "=D1 + E1");
            sheet1.SetContentsOfCell("C1", "=F1");
            sheet1.SetContentsOfCell("A1", "=B1 + C1");            
            sheet1.Save("C:\\Users\\Basil\\Desktop\\spreadsheet-test-1.xml");
            Spreadsheet sheet2 = new Spreadsheet();
            string version = sheet2.GetSavedVersion("C:\\Users\\Basil\\Desktop\\spreadsheet-test-1.xml");            
            Assert.AreEqual("2.0", version);
        }

        /// <summary>
        ///     Tests ability to save a file, then create a new spreadsheet using
        ///     the 4-argument constructor using the saved xml file.  We test for
        ///     equality between the original spreadsheet and one created using the 
        ///     saved xml file. This also tests the 'Changed' variable to determine 
        ///     if the spreadsheet has been changed or not. 
        /// </summary>
        [TestMethod]
        public void TestMethod21()
        {
            Spreadsheet sheet1 = new Spreadsheet(s => true, s => s, "2.0");
            Assert.AreEqual(sheet1.Changed, false);
            sheet1.SetContentsOfCell("G1", "hello world");
            Assert.AreEqual(sheet1.Changed, true);
            sheet1.SetContentsOfCell("D1", "1");
            sheet1.SetContentsOfCell("E1", "1");
            sheet1.SetContentsOfCell("F1", "3");
            Assert.AreEqual(sheet1.Changed, true);
            sheet1.SetContentsOfCell("B1", "=D1 + E1");
            sheet1.SetContentsOfCell("C1", "=F1");
            Assert.AreEqual(sheet1.Changed, true);
            sheet1.SetContentsOfCell("A1", "=B1 + C1");
            sheet1.Save("C:\\Users\\Basil\\Desktop\\spreadsheet-test-1.xml");
            Assert.AreEqual(sheet1.Changed, false);
            sheet1.Save("C:\\Users\\Basil\\Desktop\\spreadsheet-test-1.xml"); // try to save again (shouldn't do anything)
            Spreadsheet sheet2 = new Spreadsheet("C:\\Users\\Basil\\Desktop\\spreadsheet-test-1.xml", s => true, s => s, "default");
            Assert.AreEqual(sheet2.Changed, false);
            HashSet<string> names1 = new HashSet<string>(sheet1.GetNamesOfAllNonemptyCells());
            HashSet<string> names2 = new HashSet<string>(sheet2.GetNamesOfAllNonemptyCells());
            
            foreach(string cell_name in names1)
            {
                Assert.AreEqual(sheet1.GetCellContents(cell_name), sheet2.GetCellContents(cell_name));
            }
            foreach (string cell_name in names2)
            {
                Assert.AreEqual(sheet1.GetCellContents(cell_name), sheet2.GetCellContents(cell_name));
            }            
        }


        /// <summary>
        ///     Tests GetCellValue after changing and having to recalculate
        ///     cell values. 
        /// </summary>
        [TestMethod]
        public void TestMethod50()
        {
            Spreadsheet sheet = new Spreadsheet(s => true, s => s, "default");
            sheet.SetContentsOfCell("D1", "1");
            sheet.SetContentsOfCell("E1", "1");
            sheet.SetContentsOfCell("D1", "2");
            object D1value = sheet.GetCellValue("A1");
            Assert.AreEqual(2.0, D1value);
            sheet.SetContentsOfCell("F1", "3");
            sheet.SetContentsOfCell("B1", "=D1 + E1");
            sheet.SetContentsOfCell("B1", "=F1 + D1");
            object B1value = sheet.GetCellValue("A1");
            Assert.AreEqual(5.0, B1value);
            sheet.SetContentsOfCell("C1", "=F1");
            sheet.SetContentsOfCell("A1", "=B1 + C1");
            object A1value = sheet.GetCellValue("A1");
            Assert.AreEqual(8.0, A1value);
        }

        // --------------------------- PS4 Tests ------------------------------- //

        // ------------ PS4 Exception Tests ------------ //

        /// <summary>
        /// Tests null exception for all three SetCellContents methods (string)
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void TestMethod22()
        {            
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", null);               
        }

        /// <summary>
        /// Tests null name exception for all three SetCellContents method (string)
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod23()
        {
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell(null, "string");
        }

        /// <summary>
        /// Tests invalid name exception for all three SetCellContents method (string)
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod24()
        {
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("4356", "string");

        }

        /// <summary>
        /// Tests null name exception for all three GetCellContents methods
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod25()
        {
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.GetCellContents(null);

        }

        /// <summary>
        /// Tests invalid name exception for all three GetCellContents methods
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod26()
        {
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.GetCellContents("45345");

        }

        /// <summary>
        /// Tests null exception for all three SetCellContents methods (Formula)
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void TestMethod27()
        {            
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", null);
        }

        /// <summary>
        /// Tests null name exception for all three SetCellContents method (Formula)
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod28()
        {            
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell(null, "=1 + 1");
        }

        /// <summary>
        /// Tests invalid name exception for all three SetCellContents method (Formula)
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod29()
        {            
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("4356", "=1 + 1");
        }

        /// <summary>
        /// Tests null name exception for all three SetCellContents method (double)
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod30()
        {
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell(null, "42");
        }

        /// <summary>
        /// Tests invalid name exception for all three SetCellContents method (double)
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod31()
        {
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("4356", "42");

        }

        /// <summary>
        /// Tests null arg exception for GetDirectDependents
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void TestMethod32()
        {
            PrivateObject accessor = new PrivateObject(new Spreadsheet());
            accessor.Invoke("GetDirectDependents", new Object[] { null });

        }

        /// <summary>
        /// Tests null arg exception for GetDirectDependents
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(InvalidNameException))]
        public void TestMethod33()
        {
            PrivateObject accessor = new PrivateObject(new Spreadsheet());
            accessor.Invoke("GetDirectDependents", new Object[] { "4353" });           
        }

        /// <summary>
        /// Tests for CircularException 
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(CircularException))]
        public void TestMethod34()
        {            
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", "=A1 + B1");
        }

        /// <summary>
        /// A more complex test for CircularException
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(CircularException))]
        public void TestMethod35()
        {            
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("D1", "=A1+B1");
            sheet.SetContentsOfCell("A1", "=A3*B4");
            sheet.SetContentsOfCell("B1", "=A3*B4");
            sheet.SetContentsOfCell("A3", "=E1+C1");
            sheet.SetContentsOfCell("B4", "=C1-A3");
            sheet.SetContentsOfCell("E1", "2");
            sheet.SetContentsOfCell("C1", "6");
            sheet.SetContentsOfCell("A3", "=A1");

        }

        // --------- PS4 Non-Exception Tests ------------ //

        /// <summary>
        /// Tests for GetDirectDependents
        /// </summary>
        [TestMethod]       
        public void TestMethod36()
        {
            PrivateObject accessor = new PrivateObject(new Spreadsheet());
            accessor.Invoke("GetDirectDependents", new Object[] { "A1" });

        }

        /// <summary>
        /// Tests for SetCellContents (Formula)
        /// </summary>
        [TestMethod]
        public void TestMethod37()
        {            
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", "=C1 + B1");
            object value = sheet.GetCellContents("A1");
            Assert.AreEqual(new Formula("C1 + B1"), value);
        }

        /// <summary>
        /// Tests for SetCellContents (double)
        /// </summary>
        [TestMethod]
        public void TestMethod38()
        {            
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", "42");
            object value = sheet.GetCellContents("A1");
            Assert.AreEqual(42.0, value);
        }

        /// <summary>
        /// Tests for SetCellContents (string)
        /// </summary>
        [TestMethod]
        public void TestMethod39()
        {
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", "Hello World");
            object value = sheet.GetCellContents("A1");
            Assert.AreEqual("Hello World", value);
        }

        /// <summary>
        /// Tests for GetCellContents
        /// </summary>
        [TestMethod]
        public void TestMethod40()
        {
            AbstractSpreadsheet sheet = new Spreadsheet();
            sheet.SetContentsOfCell("A1", "Hello World");
            object value = sheet.GetCellContents("A1");
            object value2 = sheet.GetCellContents("D1"); // shouldn't exist
            Assert.AreEqual("Hello World", value);
            Assert.AreEqual("", value2);
        }

        /// <summary>
        /// Tests for SetCellContents (Formula)
        /// </summary>
        [TestMethod]
        public void TestMethod41()
        {            
            AbstractSpreadsheet sheet = new Spreadsheet(x => true, x => x.ToUpper(), "default");
            sheet.SetContentsOfCell("A1", "=c1 + b1");
            object value = sheet.GetCellContents("A1");
            Assert.AreEqual(new Formula("C1 + B1"), value);
        }

        /// <summary>
        /// Tests for replacing contents of a cell
        /// </summary>
        [TestMethod]
        public void TestMethod42()
        {            
            AbstractSpreadsheet sheet = new Spreadsheet(x => true, x => x.ToUpper(), "default");
            sheet.SetContentsOfCell("A1", "=c1 + b1");
            sheet.SetContentsOfCell("A1", "42");
            sheet.SetContentsOfCell("A1", "=c1 + b1");
            sheet.SetContentsOfCell("A1", "Hello World");            
            HashSet<string> s1 = new HashSet<string>(sheet.GetNamesOfAllNonemptyCells());
            HashSet<string> s2 = new HashSet<string>();
            s2.Add("A1");
            Assert.AreEqual(s2.Count, s1.Count);
        }

        /// <summary>
        /// Tests for replacing contents of a cell
        /// </summary>
        [TestMethod]
        public void TestMethod43()
        {            
            AbstractSpreadsheet sheet = new Spreadsheet(x => true, x => x.ToUpper(), "default");
            sheet.SetContentsOfCell("A1", "");
            sheet.SetContentsOfCell("B1", "42");
            sheet.SetContentsOfCell("C1", "Hello World");
            HashSet<string> s1 = new HashSet<string>(sheet.GetNamesOfAllNonemptyCells());
            HashSet<string> s2 = new HashSet<string>();
            s2.Add("B1");
            s2.Add("C1");
            Assert.AreEqual(s2.Count, s1.Count);
        }
  
        // -------------------- Modified PS4 Grading Tests ------------------- //

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        // EMPTY SPREADSHEETS
        [TestMethod()]
        [ExpectedException(typeof(InvalidNameException))]
        public void Test1()
        {
            Spreadsheet s = new Spreadsheet();
            s.GetCellContents(null);
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidNameException))]
        public void Test2()
        {
            Spreadsheet s = new Spreadsheet();
            s.GetCellContents("1AA");
        }

        [TestMethod()]
        public void Test3()
        {
            Spreadsheet s = new Spreadsheet();
            Assert.AreEqual("", s.GetCellContents("A2"));
        }

        // SETTING CELL TO A DOUBLE
        [TestMethod()]
        [ExpectedException(typeof(InvalidNameException))]
        public void Test4()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell(null, "1.5"); 
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidNameException))]
        public void Test5()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("1A1A", "1.5");
        }

        [TestMethod()]
        public void Test6()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("Z7", "1.5");
            Assert.AreEqual(1.5, (double)s.GetCellContents("Z7"), 1e-9);
        }

        // SETTING CELL TO A STRING
        [TestMethod()]
        [ExpectedException(typeof(ArgumentNullException))]
        public void Test7()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A8", (string)null);
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidNameException))]
        public void Test8()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell(null, "hello");
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidNameException))]
        public void Test9()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("1AZ", "hello");
        }

        [TestMethod()]
        public void Test10()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("Z7", "hello");
            Assert.AreEqual("hello", s.GetCellContents("Z7"));
        }

        // SETTING CELL TO A FORMULA
        [TestMethod()]
        [ExpectedException(typeof(FormulaFormatException))]
        public void Test11()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A8", "=()()2359235");
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidNameException))]
        public void Test12()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell(null, "=2");
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidNameException))]
        public void Test13()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("1AZ", "=2");
        }

        [TestMethod()]
        public void Test14()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("Z7", "=3");            
            Assert.AreEqual("=3", "=" + s.GetCellContents("Z7"));
            Assert.AreNotEqual("=2", "=" + s.GetCellContents("Z7"));
        }

        // CIRCULAR FORMULA DETECTION
        [TestMethod()]
        [ExpectedException(typeof(CircularException))]
        public void Test15()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A1", "=A2");
            s.SetContentsOfCell("A2", "=A1");
        }

        [TestMethod()]
        [ExpectedException(typeof(CircularException))]
        public void Test16()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A1", "=A2+A3");
            s.SetContentsOfCell("A3", "=A4+A5");
            s.SetContentsOfCell("A5", "=A6+A7");
            s.SetContentsOfCell("A7", "=A1+A1");
        }

        [TestMethod()]
        [ExpectedException(typeof(CircularException))]
        public void Test17()
        {
            Spreadsheet s = new Spreadsheet();
            try
            {
                s.SetContentsOfCell("A1", "=A2+A3");
                s.SetContentsOfCell("A2", "15");
                s.SetContentsOfCell("A3", "30");
                s.SetContentsOfCell("A2", "=A3*A1");
            }
            catch (CircularException e)
            {
                Assert.AreEqual(15, (double)s.GetCellContents("A2"), 1e-9);
                throw e;
            }
        }

        // NONEMPTY CELLS
        [TestMethod()]
        public void Test18()
        {
            Spreadsheet s = new Spreadsheet();
            Assert.IsFalse(s.GetNamesOfAllNonemptyCells().GetEnumerator().MoveNext());
        }

        [TestMethod()]
        public void Test19()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("B1", "");
            Assert.IsFalse(s.GetNamesOfAllNonemptyCells().GetEnumerator().MoveNext());
        }

        [TestMethod()]
        public void Test20()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("B1", "hello");
            Assert.IsTrue(new HashSet<string>(s.GetNamesOfAllNonemptyCells()).SetEquals(new HashSet<string>() { "B1" }));
        }

        [TestMethod()]
        public void Test21()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("B1", "52.25");
            Assert.IsTrue(new HashSet<string>(s.GetNamesOfAllNonemptyCells()).SetEquals(new HashSet<string>() { "B1" }));
        }

        [TestMethod()]
        public void Test22()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("B1", "=3.5");
            Assert.IsTrue(new HashSet<string>(s.GetNamesOfAllNonemptyCells()).SetEquals(new HashSet<string>() { "B1" }));
        }

        [TestMethod()]
        public void Test23()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A1", "17.2");
            s.SetContentsOfCell("C1", "hello");
            s.SetContentsOfCell("B1", "=3.5");
            Assert.IsTrue(new HashSet<string>(s.GetNamesOfAllNonemptyCells()).SetEquals(new HashSet<string>() { "A1", "B1", "C1" }));
        }

        // RETURN VALUE OF SET CELL CONTENTS
        [TestMethod()]
        public void Test24()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("B1", "hello");
            s.SetContentsOfCell("C1", "=5");
            Assert.IsTrue(s.SetContentsOfCell("A1", "17.2").SetEquals(new HashSet<string>() { "A1" }));
        }

        [TestMethod()]
        public void Test25()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A1", "17.2");
            s.SetContentsOfCell("C1", "=5");
            Assert.IsTrue(s.SetContentsOfCell("B1", "hello").SetEquals(new HashSet<string>() { "B1" }));
        }

        [TestMethod()]
        public void Test26()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A1", "17.2");
            s.SetContentsOfCell("B1", "hello");
            Assert.IsTrue(s.SetContentsOfCell("C1", "=5").SetEquals(new HashSet<string>() { "C1" }));
        }

        [TestMethod()]
        public void Test27()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A1", "=A2+A3");
            s.SetContentsOfCell("A2", "6");
            s.SetContentsOfCell("A3", "=A2+A4");
            s.SetContentsOfCell("A4", "=A2+A5");
            Assert.IsTrue(s.SetContentsOfCell("A5", "82.5").SetEquals(new HashSet<string>() { "A5", "A4", "A3", "A1" }));
        }

        // CHANGING CELLS
        [TestMethod()]
        public void Test28()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A1", "=A2+A3");
            s.SetContentsOfCell("A1", "2.5");
            Assert.AreEqual(2.5, (double)s.GetCellContents("A1"), 1e-9);
        }

        [TestMethod()]
        public void Test29()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A1", "=A2+A3");
            s.SetContentsOfCell("A1", "Hello");
            Assert.AreEqual("Hello", (string)s.GetCellContents("A1"));
        }

        [TestMethod()]
        public void Test30()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A1", "Hello");
            s.SetContentsOfCell("A1", "=23");
            Assert.AreEqual(new Formula("23"), (Formula)s.GetCellContents("A1"));
            Assert.AreNotEqual(new Formula("24"), (Formula)s.GetCellContents("A1"));
        }

        // STRESS TESTS
        [TestMethod()]
        public void Test31()
        {
            Spreadsheet s = new Spreadsheet();
            s.SetContentsOfCell("A1", "=B1+B2");
            s.SetContentsOfCell("B1", "=C1-C2");
            s.SetContentsOfCell("B2", "=C3*C4");
            s.SetContentsOfCell("C1", "=D1*D2");
            s.SetContentsOfCell("C2", "=D3*D4");
            s.SetContentsOfCell("C3", "=D5*D6");
            s.SetContentsOfCell("C4", "=D7*D8");
            s.SetContentsOfCell("D1", "=E1");
            s.SetContentsOfCell("D2", "=E1");
            s.SetContentsOfCell("D3", "=E1");
            s.SetContentsOfCell("D4", "=E1");
            s.SetContentsOfCell("D5", "=E1");
            s.SetContentsOfCell("D6", "=E1");
            s.SetContentsOfCell("D7", "=E1");
            s.SetContentsOfCell("D8", "=E1");
            ISet<String> cells = s.SetContentsOfCell("E1", "0");
            Assert.IsTrue(new HashSet<string>(){"A1", "B1", "B2", "C1", "C2", "C3", "C4", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "E1"}.SetEquals(cells));
        }
        [TestMethod()]
        public void Test32()
        {
            Test31();
        }
        [TestMethod()]
        public void Test33()
        {
            Test31();
        }
        [TestMethod()]
        public void Test34()
        {
            Test31();
        }

        [TestMethod()]
        public void Test35()
        {
            Spreadsheet s = new Spreadsheet();
            ISet<String> cells = new HashSet<string>();
            for (int i = 1; i < 200; i++)
            {
                cells.Add("A" + i);
                Assert.IsTrue(cells.SetEquals(s.SetContentsOfCell("A" + i, "=A" + (i + 1))));
            }
        }
        [TestMethod()]
        public void Test36()
        {
            Test35();
        }
        [TestMethod()]
        public void Test37()
        {
            Test35();
        }
        [TestMethod()]
        public void Test38()
        {
            Test35();
        }
        [TestMethod()]
        public void Test39()
        {
            Spreadsheet s = new Spreadsheet();
            for (int i = 1; i < 200; i++)
            {
                s.SetContentsOfCell("A" + i, "=A" + (i + 1));
            }
            try
            {
                s.SetContentsOfCell("A150", "=A50");
                Assert.Fail();
            }
            catch (CircularException)
            {
            }
        }
        [TestMethod()]
        public void Test40()
        {
            Test39();
        }
        [TestMethod()]
        public void Test41()
        {
            Test39();
        }
        [TestMethod()]
        public void Test42()
        {
            Test39();
        }

        [TestMethod()]
        public void Test43()
        {
            Spreadsheet s = new Spreadsheet();
            for (int i = 0; i < 500; i++)
            {
                s.SetContentsOfCell("A1" + i, "=A1" + (i + 1));
            }
            HashSet<string> firstCells = new HashSet<string>();
            HashSet<string> lastCells = new HashSet<string>();
            for (int i = 0; i < 250; i++)
            {
                firstCells.Add("A1" + i);
                lastCells.Add("A1" + (i + 250));
            }
            Assert.IsTrue(s.SetContentsOfCell("A1249", "25.0").SetEquals(firstCells));
            Assert.IsTrue(s.SetContentsOfCell("A1499", "0").SetEquals(lastCells));
        }
        [TestMethod()]
        public void Test44()
        {
            Test43();
        }
        [TestMethod()]
        public void Test45()
        {
            Test43();
        }
        [TestMethod()]
        public void Test46()
        {
            Test43();
        }
                             
    }
}

