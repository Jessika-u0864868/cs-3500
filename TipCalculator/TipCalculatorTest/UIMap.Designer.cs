// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TipCalculatorTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// TestSmallTip - Use 'TestSmallTipParams' to pass parameters into this method.
        /// </summary>
        public void TestSmallTip()
        {
            #region Variable Declarations
            WinEdit uIBill_boxEdit = this.UIForm1Window.UIBill_boxWindow.UIBill_boxEdit;
            WinEdit uITip_box_percentEdit = this.UIForm1Window.UITip_box_percentWindow.UITip_box_percentEdit;
            WinButton uICalculateButton = this.UIForm1Window.UICalculateWindow.UICalculateButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\TipCalculator\TipCalculator\bin\Debug\TipCalculator.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.TestSmallTipParams.UIForm1WindowExePath, this.TestSmallTipParams.UIForm1WindowAlternateExePath);

            // Type '100' in 'bill_box' text box
            uIBill_boxEdit.Text = this.TestSmallTipParams.UIBill_boxEditText;

            // Type '10' in 'tip_box_percent' text box
            uITip_box_percentEdit.Text = this.TestSmallTipParams.UITip_box_percentEditText;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(52, 5));
        }
        
        /// <summary>
        /// SmallTipAssertions - Use 'SmallTipAssertionsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SmallTipAssertions()
        {
            #region Variable Declarations
            WinEdit uITip_boxEdit = this.UIForm1Window.UITip_boxWindow.UITip_boxEdit;
            #endregion

            // Verify that the 'Text' property of 'tip_box' text box equals '$10.00'
            Assert.AreEqual(this.SmallTipAssertionsExpectedValues.UITip_boxEditText, uITip_boxEdit.Text, "Should be $10");
        }
        
        /// <summary>
        /// LargeTipTest - Use 'LargeTipTestParams' to pass parameters into this method.
        /// </summary>
        public void LargeTipTest()
        {
            #region Variable Declarations
            WinEdit uIBill_boxEdit = this.UIForm1Window.UIBill_boxWindow.UIBill_boxEdit;
            WinEdit uITip_box_percentEdit = this.UIForm1Window.UITip_box_percentWindow.UITip_box_percentEdit;
            WinButton uICalculateButton = this.UIForm1Window.UICalculateWindow.UICalculateButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\TipCalculator\TipCalculator\bin\Debug\TipCalculator.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.LargeTipTestParams.UIForm1WindowExePath, this.LargeTipTestParams.UIForm1WindowAlternateExePath);

            // Type '100' in 'bill_box' text box
            uIBill_boxEdit.Text = this.LargeTipTestParams.UIBill_boxEditText;

            // Type '100' in 'tip_box_percent' text box
            uITip_box_percentEdit.Text = this.LargeTipTestParams.UITip_box_percentEditText;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(31, 4));
        }
        
        /// <summary>
        /// LargeTipAssertions - Use 'LargeTipAssertionsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void LargeTipAssertions()
        {
            #region Variable Declarations
            WinEdit uITip_boxEdit = this.UIForm1Window.UITip_boxWindow.UITip_boxEdit;
            #endregion

            // Verify that the 'Text' property of 'tip_box' text box equals '$100.00'
            Assert.AreEqual(this.LargeTipAssertionsExpectedValues.UITip_boxEditText, uITip_boxEdit.Text, "Should be $100");
        }
        
        /// <summary>
        /// Close
        /// </summary>
        public void Close()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 15));
        }
        
        #region Properties
        public virtual TestSmallTipParams TestSmallTipParams
        {
            get
            {
                if ((this.mTestSmallTipParams == null))
                {
                    this.mTestSmallTipParams = new TestSmallTipParams();
                }
                return this.mTestSmallTipParams;
            }
        }
        
        public virtual SmallTipAssertionsExpectedValues SmallTipAssertionsExpectedValues
        {
            get
            {
                if ((this.mSmallTipAssertionsExpectedValues == null))
                {
                    this.mSmallTipAssertionsExpectedValues = new SmallTipAssertionsExpectedValues();
                }
                return this.mSmallTipAssertionsExpectedValues;
            }
        }
        
        public virtual LargeTipTestParams LargeTipTestParams
        {
            get
            {
                if ((this.mLargeTipTestParams == null))
                {
                    this.mLargeTipTestParams = new LargeTipTestParams();
                }
                return this.mLargeTipTestParams;
            }
        }
        
        public virtual LargeTipAssertionsExpectedValues LargeTipAssertionsExpectedValues
        {
            get
            {
                if ((this.mLargeTipAssertionsExpectedValues == null))
                {
                    this.mLargeTipAssertionsExpectedValues = new LargeTipAssertionsExpectedValues();
                }
                return this.mLargeTipAssertionsExpectedValues;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        #endregion
        
        #region Fields
        private TestSmallTipParams mTestSmallTipParams;
        
        private SmallTipAssertionsExpectedValues mSmallTipAssertionsExpectedValues;
        
        private LargeTipTestParams mLargeTipTestParams;
        
        private LargeTipAssertionsExpectedValues mLargeTipAssertionsExpectedValues;
        
        private UIForm1Window mUIForm1Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestSmallTip'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class TestSmallTipParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\TipCalculator\TipCalculator\bin\Debug\TipCalculator.exe'
        /// </summary>
        public string UIForm1WindowExePath = @"..\..\..\TipCalculator\bin\debug\TipCalculator.exe";
           //"C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\TipCalculator\\TipCalculator\\" +
           // "bin\\Debug\\TipCalculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\TipCalculator\TipCalculator\bin\Debug\TipCalculator.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\TipCalculator\\TipCalculator\\b" +
            "in\\Debug\\TipCalculator.exe";
        
        /// <summary>
        /// Type '100' in 'bill_box' text box
        /// </summary>
        public string UIBill_boxEditText = "100";
        
        /// <summary>
        /// Type '10' in 'tip_box_percent' text box
        /// </summary>
        public string UITip_box_percentEditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SmallTipAssertions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SmallTipAssertionsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'tip_box' text box equals '$10.00'
        /// </summary>
        public string UITip_boxEditText = "$10.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LargeTipTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class LargeTipTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\TipCalculator\TipCalculator\bin\Debug\TipCalculator.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\TipCalculator\\TipCalculator\\" +
            "bin\\Debug\\TipCalculator.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\TipCalculator\TipCalculator\bin\Debug\TipCalculator.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\TipCalculator\\TipCalculator\\b" +
            "in\\Debug\\TipCalculator.exe";
        
        /// <summary>
        /// Type '100' in 'bill_box' text box
        /// </summary>
        public string UIBill_boxEditText = "100";
        
        /// <summary>
        /// Type '100' in 'tip_box_percent' text box
        /// </summary>
        public string UITip_box_percentEditText = "100";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LargeTipAssertions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class LargeTipAssertionsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'tip_box' text box equals '$100.00'
        /// </summary>
        public string UITip_boxEditText = "$100.00";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIBill_boxWindow UIBill_boxWindow
        {
            get
            {
                if ((this.mUIBill_boxWindow == null))
                {
                    this.mUIBill_boxWindow = new UIBill_boxWindow(this);
                }
                return this.mUIBill_boxWindow;
            }
        }
        
        public UITip_box_percentWindow UITip_box_percentWindow
        {
            get
            {
                if ((this.mUITip_box_percentWindow == null))
                {
                    this.mUITip_box_percentWindow = new UITip_box_percentWindow(this);
                }
                return this.mUITip_box_percentWindow;
            }
        }
        
        public UICalculateWindow UICalculateWindow
        {
            get
            {
                if ((this.mUICalculateWindow == null))
                {
                    this.mUICalculateWindow = new UICalculateWindow(this);
                }
                return this.mUICalculateWindow;
            }
        }
        
        public UITip_boxWindow UITip_boxWindow
        {
            get
            {
                if ((this.mUITip_boxWindow == null))
                {
                    this.mUITip_boxWindow = new UITip_boxWindow(this);
                }
                return this.mUITip_boxWindow;
            }
        }
        
        public UIForm1TitleBar UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new UIForm1TitleBar(this);
                }
                return this.mUIForm1TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIBill_boxWindow mUIBill_boxWindow;
        
        private UITip_box_percentWindow mUITip_box_percentWindow;
        
        private UICalculateWindow mUICalculateWindow;
        
        private UITip_boxWindow mUITip_boxWindow;
        
        private UIForm1TitleBar mUIForm1TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBill_boxWindow : WinWindow
    {
        
        public UIBill_boxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "bill_box";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIBill_boxEdit
        {
            get
            {
                if ((this.mUIBill_boxEdit == null))
                {
                    this.mUIBill_boxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIBill_boxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIBill_boxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIBill_boxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITip_box_percentWindow : WinWindow
    {
        
        public UITip_box_percentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tip_box_percent";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UITip_box_percentEdit
        {
            get
            {
                if ((this.mUITip_box_percentEdit == null))
                {
                    this.mUITip_box_percentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITip_box_percentEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Tip (%)";
                    this.mUITip_box_percentEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUITip_box_percentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITip_box_percentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICalculateWindow : WinWindow
    {
        
        public UICalculateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UICalculateButton
        {
            get
            {
                if ((this.mUICalculateButton == null))
                {
                    this.mUICalculateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICalculateButton.SearchProperties[WinButton.PropertyNames.Name] = "Calculate";
                    this.mUICalculateButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICalculateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICalculateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITip_boxWindow : WinWindow
    {
        
        public UITip_boxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tip_box";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UITip_boxEdit
        {
            get
            {
                if ((this.mUITip_boxEdit == null))
                {
                    this.mUITip_boxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITip_boxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Bill Amount";
                    this.mUITip_boxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUITip_boxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITip_boxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIForm1TitleBar : WinTitleBar
    {
        
        public UIForm1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
