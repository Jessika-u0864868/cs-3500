using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CustomNetworking;
using System.Net.Sockets;
using System.Net;

namespace BoggleServer
{
    /// <summary>
    /// This program creates the server side of our Boggle game. Update
    /// </summary>
    /// <author>Basil Vetas, Lance Petersen</author>
    /// <date>November 18, 2014</date>
    class BoggleServer
    {
        // Listens for incoming connections
        private TcpListener server;

        // One StringSocket per connected client
        private List<StringSocket> allSockets;

        // the name associated with the socket
        private List<string> user_names;

        /// <summary>
        /// Will set up the Boggle Server
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {
            int parameters;

            if (args.Length == 2)
                parameters = 2;
            else if (args.Length == 3)
                parameters = 3;
            else return; // Do something here to STOP

            int timer;
            string pathname;
            string initBoggleBoard;

            // if the first arg is an int, get it as our timer
            if (int.TryParse(args[0], out timer)) { }
            else return; // Do something here to STOP                      

            pathname = args[1];

            // if there are three parameters, use it, otherwise set it to null
            if (parameters == 3)
                initBoggleBoard = args[2];
            else initBoggleBoard = null;

            new BoggleServer(timer, pathname, initBoggleBoard);
            Console.ReadLine();
        }

        /// <summary>
        /// Create a Boggle Server. 
        /// </summary>
        /// <param name="timer"></param>
        /// <param name="pathname"></param>
        /// <param name="initBoggleBoard"></param>
        private BoggleServer(int timer, string pathname, string initBoggleBoard)
        {
            server = new TcpListener(IPAddress.Any, 2000);
            allSockets = new List<StringSocket>();
            user_names = new List<string>();
            server.Start();
            server.BeginAcceptSocket(ConnectionReceived, null);
        }

        /// <summary>
        /// Deals with connection requests
        /// </summary>
        private void ConnectionReceived(IAsyncResult ar)
        {
            Socket socket = server.EndAcceptSocket(ar);
            StringSocket ss = new StringSocket(socket, UTF8Encoding.Default);
            ss.BeginReceive(NameReceived, ss);
            server.BeginAcceptSocket(ConnectionReceived, null);
        }

        /// <summary>
        /// Receives the first line of text from the client, which contains the name of the remote
        /// user.  Uses it to compose and send back a welcome message.
        /// </summary>
        private void NameReceived(String name, Exception e, object p)
        {
            StringSocket ss = (StringSocket)p;

            //Check that name starts with PLAY

            lock (allSockets)
            {
                allSockets.Add(ss);
                user_names.Add(name);
                ss.BeginSend(name + " welcome to Boggle!\n", (ee, pp) => { }, null);
                ss.BeginReceive(IncomingCallback, ss);
                // Question: how would you notify other clients of the new person joining?
            }

        }

        /// <summary>
        /// Deals with lines of text as they arrive at the server.
        /// </summary>
        /// <param name="line"> Question: how would comment these parameters?</param>
        /// <param name="e"></param>
        /// <param name="ss"></param>
        private void IncomingCallback(String line, Exception e, object ss)
        {
            Console.WriteLine(line);
            lock (allSockets)
            {
                // Question: what is better: foreach or for?
                // foreach (StringSocket s in allSockets)
                for (int i = 0; i < allSockets.Count; i++)
                {
                    allSockets[i].BeginSend(user_names[i] + ": " + line + "\r\n", (ex, py) => { }, null);
                    // Question: why do we create an "empty" lambda function as the call back?
                    // Question: why do we send \r\n
                }
            }
            ((StringSocket)ss).BeginReceive(IncomingCallback, ss);
        }
    }
}
