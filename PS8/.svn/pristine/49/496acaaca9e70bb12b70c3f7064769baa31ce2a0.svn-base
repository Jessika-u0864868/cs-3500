using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CustomNetworking;
using System.Net.Sockets;
using System.Net;
using System.Text.RegularExpressions;
using System.IO;
using BB;
using System.Timers;

namespace BoggleServer
{
    /// <summary>
    /// This program creates the server side of our Boggle game. Update
    /// </summary>
    /// <author>Basil Vetas, Lance Petersen</author>
    /// <date>November 18, 2014</date>
    class BoggleServer
    {
        // Listens for incoming connections
        private TcpListener server;

        // One StringSocket per connected client
        private List<StringSocket> allSockets;

        // the name associated with the socket
        private List<string> user_names;

        // the number of seconds that each Boggle game should last (passed in as parameter)
        private int gameLength;

        // the path name of a file that contains all the legal words (passed in as parameter)
        private HashSet<string> legalWords;

        // optional string of exactly 16 letters used to initialize each Boggle board (optional parameter)
        private string initialBoggleBoard;

        // A player that is waiting to be matched with a new player. 
        private Player waitingPlayer;

        // An object to lock on
        private readonly Object lockObject;

        /// <summary>
        /// Will set up the Boggle Server
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {
            int parameters; // holds number of parameters we receive from console

            // can only take 2 or 3 parameters
            if (args.Length == 2)
                parameters = 2;
            else if (args.Length == 3)
                parameters = 3;
            else // otherwise return with error
            {   
                Console.Error.WriteLine("Invalid number of arguments.");
                return;
            }                

            // variables for BoggleServer constructor
            int timer;
            string pathname;
            string initBoard;

            // if the first arg is an int, get it as our timer
            if (int.TryParse(args[0], out timer)) 
            {
                if(!(timer > 0))    // if the time is not positive, return with error
                {
                    Console.Error.WriteLine("Invalid time argument. Must be positive.");
                    return;
                }
            }
            else // otherwise return with error
            {
                Console.Error.WriteLine("Invalid time argument. Must be a positive integer.");
                return;                                 
            }

            // need to check if the file can be read properly
            pathname = args[1];

            // if there are three parameters, use it
            if (parameters == 3)
            {
                if(args[2].Length != 16) // if the initial board is not 16 characters
                {
                    // return with error
                    Console.Error.WriteLine("Initial Boggle board setup must have 16 characters.");
                    return;
                }

                if (!(Regex.IsMatch(args[2], @"^[a-zA-Z]+$"))) // if it is not a letter
                {
                    // return with error
                    Console.Error.WriteLine("Initial Boggle board can only be a letter a-z.");
                    return;
                }                

                initBoard = args[2];
            } 
            else initBoard = null; // otherwise set it to null            

            // create a new game server and read line
            new BoggleServer(timer, pathname, initBoard);
            Console.ReadLine();
        }

        /// <summary>
        /// Create a Boggle Server. 
        /// </summary>
        /// <param name="timer"></param>
        /// <param name="pathname"></param>
        /// <param name="initBoard"></param>
        /// <citation>Chat Server from Lab Examples</citation>
        private BoggleServer(int timer, string pathname, string initBoard)
        {
            // initialize paramter variables
            gameLength = timer;
            string legalWordsFile = pathname;
            initialBoggleBoard = initBoard;
            waitingPlayer = null;
            lockObject = new Object();

            // if the pathname is null or empty, return with error
            if (ReferenceEquals(legalWordsFile, null) || legalWordsFile.Equals(""))
            {
                // return with error
                Console.Error.WriteLine("Initial Boggle board can only be a letter a-z.");
                return;
            }
            else legalWords = getLegalWords(legalWordsFile); // else read in legal words and store        
                        
            allSockets = new List<StringSocket>(); // will hold all the string sockets between clients
            user_names = new List<string>();    // will hold names of all players

            server = new TcpListener(IPAddress.Any, 2000); // create new server for boggle
            server.Start(); // start the server

            // begin accepting connections from players
            server.BeginAcceptSocket(ReceivePlayerCallback, null); 
        }

        /// <summary>
        /// Helper method to get the legal words for our Boggle game
        /// </summary>
        /// <param name="pathname"></param>
        /// <returns></returns>
        private HashSet<string> getLegalWords(string pathname)
        {
            HashSet<string> boggleWords = new HashSet<string>();

            try // try to read in the dictionary file
            {
                using (StreamReader reader = new StreamReader(pathname))
                {
                    string word; // holds a legal word

                    // while there is still another word in the file to read
                    while (!(ReferenceEquals(word = reader.ReadLine(), null)))
                    {
                        boggleWords.Add(word);  // add it to our set of legal words
                    }                   
                }
            }
            catch(Exception e) // catch any exception
            {
                Console.WriteLine("The dictionary file could not be read: ");
                Console.WriteLine(e.Message);
            }

            return boggleWords; // return list of legal words
        }

        /// <summary>
        /// Deals with connection requests when a new player joins the Boggle game
        /// </summary>
        /// <param name="ar">Resulting status from asynchronous operation</param>
        /// <citation>Chat Server from Lab Examples</citation>
        private void ReceivePlayerCallback(IAsyncResult ar)
        {
            // create a new socket using the received player connection
            Socket socket = server.EndAcceptSocket(ar);

            // wrap the socket in a string socket for the new player connection
            StringSocket playerConnection = new StringSocket(socket, UTF8Encoding.Default);

            // let the string socket begin accepting input to read the player name
            playerConnection.BeginReceive(ReceiveNameCallback, playerConnection);

            // let the server accept additional connections from new players
            server.BeginAcceptSocket(ReceivePlayerCallback, null);
        }

        /// <summary>
        /// Receives the first line of text from the client, which contains the name of the new
        /// boggle player.  Uses it to compose and send back a welcome message.
        /// 
        /// Expects a "PLAY @" message after a new user has connected
        /// 
        /// Invariant: the object parameter will always be a String Socket
        /// </summary>
        /// <param name="name">The string input from player</param>
        /// <param name="exception">A possible exception</param>
        /// <param name="payload">A String Socket</param>
        /// <citation>Chat Server from Lab Examples</citation>
        private void ReceiveNameCallback(String name, Exception exception, object payload)
        {
            StringSocket ss = (StringSocket) payload;  // invariant safe to cast as string socket

            // If the name is null or empty, it is invalid
            if (ReferenceEquals(null, name) || name.Equals(""))
            {
                ss.BeginSend("IGNORING", (e, o) => { }, ss);
                return;
            }

            // If the reference is non-null, then there was a bad connection.
            if (!ReferenceEquals(null, exception))
            {
                ss.BeginSend("IGNORING " + name, (e, o) => { }, ss);
                return;
            }

            // If name doesn't start with PLAY, return
            if (!(name.StartsWith("PLAY ")))                
            {
                ss.BeginSend("IGNORING " + name, (e, o) => { }, ss);
                return;
            }
            
            string playerName = name.Substring(5); // use this to store the actual name of the player

            // Create new player using playerName
            Player player = new Player(playerName, ss);

            lock (lockObject)
            {
                if (ReferenceEquals(null, waitingPlayer))
                    waitingPlayer = player;
                else
                {
                    Game game = new Game(waitingPlayer, player, gameLength, initialBoggleBoard, legalWords);
                    game.Start();
                    waitingPlayer = null;
                }
            }
        }

        // this stuff below would be done in the 'Game' class?

        /// <summary>
        /// Deals with lines of text as they arrive at the server.
        /// </summary>
        /// <param name="line"> Question: how would comment these parameters?</param>
        /// <param name="e"></param>
        /// <param name="ss"></param>
        /// <citation>Chat Server from Lab Examples</citation>
        private void IncomingCallback(String line, Exception e, object ss)
        {
            Console.WriteLine(line);
            lock (allSockets)
            {
                // Question: what is better: foreach or for?
                // foreach (StringSocket s in allSockets)
                for (int i = 0; i < allSockets.Count; i++)
                {
                    allSockets[i].BeginSend(user_names[i] + ": " + line + "\r\n", (ex, py) => { }, null);
                    // Question: why do we create an "empty" lambda function as the call back?
                    // Question: why do we send \r\n
                }
            }
            ((StringSocket)ss).BeginReceive(IncomingCallback, ss);
        }

        /// <summary>
        /// Stop the Boggle server from accepting new player connections
        /// </summary>
        private void Stop()
        {
            // may need to dispose of resources here

            // stop the server from accepting connections
            server.Stop();
        }
    }

    /// <summary>
    /// A new Boggle player
    /// </summary>
    internal class Player
    {
        internal string name;

        internal StringSocket ss {internal get; private set;}

        internal int score {public get; public set;}

        internal HashSet<string> wordsFound;

        /// <summary>
        /// Constructor for a new player
        /// </summary>
        public Player(string playerName, StringSocket connection)
        {
            // initialize variables
            name = playerName;
            ss = connection;
            score = 0;
            wordsFound = new HashSet<string>();
        }
    }

    /// <summary>
    /// A new Boggle game
    /// </summary>
    protected class Game
    {
        // private memeber variables
        private Player playerOne;
        private Player playerTwo;
        private int timeRemaining;
        private Timer timer; 
        private BoggleBoard board;
        private HashSet<String> dictionary;

        public Game(Player playerOne, Player playerTwo, int gameLength, string initialBoardSetup, HashSet<string> legalWordsDictionary)
        {
            //Initialize the game.
            if (ReferenceEquals(initialBoardSetup, null))
                board = new BoggleBoard();
            else
                board = new BoggleBoard(initialBoardSetup);

            this.playerOne = playerOne;
            this.playerTwo = playerTwo;
            this.timeRemaining = gameLength;
            this.dictionary = legalWordsDictionary;
        }

        /// <summary>
        /// Starts the game of Boggle
        /// </summary>
        public void Start()
        {
            //Send the START command to both players. 
            playerOne.ss.BeginSend("START " + board.ToString() + " " + timeRemaining + " " + playerTwo.name + "\n", (e, o) => { }, playerOne.ss);
            playerTwo.ss.BeginSend("START " + board.ToString() + " " + timeRemaining + " " + playerOne.name + "\n", (e, o) => { }, playerTwo.ss);
            playGame();
        }

        /// <summary>
        /// The actual gameplay for a Boggle game
        /// </summary>
        private void playGame ()
        {
            while (timeRemaining > 0)
            {
                playerOne.ss.BeginReceive(receiveWordsCallback, playerOne);
                playerTwo.ss.BeginReceive(receiveWordsCallback, playerTwo);

                // send updated scores to both players

                // send updated time to both players
            }
        }

        /// <summary>
        /// Callback for when a player finds a word (or thinks they have found a word)
        /// </summary>
        /// <param name="word"></param>
        /// <param name="exception"></param>
        /// <param name="payload"></param>
        private void receiveWordsCallback(string word, Exception exception, object payload)
        {
            Player playerFoundWord = payload as Player;
            Player opponent;
            bool isPlayerOne;

            // if the player who found the word is playerOne, then the opponent must be playerTwo
            if (ReferenceEquals(playerFoundWord, playerOne))
                opponent = playerTwo;
            else opponent = playerOne;  // otherwise the opponent is playerOne

            if(!(ReferenceEquals(exception, null))) // if there was some excpetion then return
            {
                // may need to do stuff here to stop timer and end game
                return;   
            }              

            // if the socket connection is closed (so no data was sent)
            if(ReferenceEquals(word, null) && ReferenceEquals(exception, null))
            {
                // may need to do stuff here to stop timer and end game
                return;
            }

            // --- This is where we may want to create an 'update score' method with code below ---

            updateScore(word, playerFoundWord, opponent);
                        
            //send updated scores to players.
            //playerFoundWord.ss.BeginSend();            
        }

        /// <summary>
        /// Helper method to update the score when a player finds a word
        /// </summary>
        private void updateScore(string word, Player playerFoundWord, Player opponent)
        {
            // If name doesn't start with WORD
            if (!(word.StartsWith("WORD ")))
            {
                // then ignore the command and return
                playerFoundWord.ss.BeginSend("IGNORING", (e, o) => { }, playerOne.ss);
                return;
            }

            // if word is less than three characters, don't count it
            if (word.Length < 3)
                return;

            // if the word is not valid
            if (!(dictionary.Contains(word)) || !board.CanBeFormed(word))
            {
                lock (timer) // lock on the timer
                {
                    // remove a point from the play who found the work
                    playerFoundWord.score--;
                }
            }
            else // otherwise if the word is valid
            {
                if (opponent.wordsFound.Contains(word)) // then if opponent already found the word
                {
                    // then remove the word from opponents's list                        
                    opponent.wordsFound.Remove(word);

                    // and reduce opponent's score by the value of word
                    opponent.score = opponent.score - getValue(word);
                }
                else // if the opponent hasn't found the word
                {
                    // then if the finder hasn't found the word yet either
                    if (!(playerFoundWord.wordsFound.Contains(word)))
                    {
                        // then add the word to player one's list                        
                        playerFoundWord.wordsFound.Add(word);

                        // and increase player one's score by the value of word
                        playerFoundWord.score = playerFoundWord.score + getValue(word);
                    }
                }
            }
        }

        /// <summary>
        /// Helper method to get the point value of a found word.
        /// 
        /// Invariant: word will never be less than 3 characters
        /// </summary>
        /// <param name="word"></param>
        /// <returns></returns>
        private int getValue(string word)
        {
            int pointValue = 0; // holds the value of word

            // if word has 3 or 4 characters
            if ((word.Length == 3) || word.Length == 4)
                pointValue = 1; // worth one point
            else if (word.Length == 5) // if 5 characters
                pointValue = 2; // worth 2 point
            else if (word.Length == 6) // if 6 characters 
                pointValue = 3; // worth 3 points
            else if (word.Length == 7) // if 7 characters
                pointValue = 5; // worth 5 points
            else // if more than 7 charcters
                pointValue = 11; // worth 11 points

            return pointValue;
        }
    }
}
