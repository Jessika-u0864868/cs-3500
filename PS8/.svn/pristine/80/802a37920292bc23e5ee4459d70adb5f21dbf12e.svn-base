using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using BoggleServer;
using System.Threading;
using System.Net.Sockets;
using System.Text;
using CustomNetworking;


namespace BoggleServerTest
{
    /// <summary>
    /// Unit tests for our BoggleServer
    /// </summary>
    /// <author>Basil Vetas, Lance Petersen</author>
    /// <date>November 18, 2014</date>
    [TestClass]
    public class BoggleServerTest
    {
        /// <summary>
        /// Starts a new server with two arguments, stops it, and then starts a new server
        /// with three arguments, and stops it.
        /// </summary>
        [TestMethod]
        public void TestMethod1()
        {
            BoggleServer.BoggleServer twoArgServer = null;
            BoggleServer.BoggleServer threeArgServer = null;

            try
            {
                // make boggle with 2 arguments
                string[] twoArgs = { "200", "../../../Resources/dictionary.txt" };
                twoArgServer = new BoggleServer.BoggleServer(twoArgs);
            }
            finally
            {
                // close the server
                twoArgServer.Stop();                
            }

            try
            {
                // make boggle with 3 arguments
                string[] threeArgs = { "200", "../../../Resources/dictionary.txt", "jimiergsatnesaps" };
                threeArgServer = new BoggleServer.BoggleServer(threeArgs);            
            }
            finally 
            {
                // close the server
                threeArgServer.Stop();
            }
        }

        /// <summary>
        /// A simple test for BoggleServer for a single player connection
        ///</summary>
        [TestMethod()]
        public void TestMethod2()
        {
            new Test2Class().run();
        }

        public class Test2Class
        {
            // Data that is shared across threads
            private ManualResetEvent mre;            

            public void run()
            {
                BoggleServer.BoggleServer server = null;
                TcpClient client = null;               

                try
                {
                    string[] args = { "200", "../../../Resources/dictionary.txt" };
                    server = new BoggleServer.BoggleServer(args);

                    // create player one connection
                    client = new TcpClient("localhost", 2001);
                    Socket clientSocket = client.Client;
                    StringSocket player = new StringSocket(clientSocket, new UTF8Encoding());

                    mre = new ManualResetEvent(false);

                    // have player one join the boggle game
                    player.BeginSend("PLAY Basil\n", (o, e) => { mre.Set(); }, null);

                    // waits for one second, expecting the callback to trigger the mre signal
                    Assert.IsTrue(mre.WaitOne(1000));
                }
                finally 
                {
                    server.Stop();
                    client.Close();
                }
                     
            }

        }

        /// <summary>
        /// A simple test for BoggleServer for a single player connection
        ///</summary>
        [TestMethod()]
        public void TestMethod3()
        {
            new Test3Class().run();
        }

        public class Test3Class
        {
            // Data that is shared across threads
            private ManualResetEvent mre1;
            private ManualResetEvent mre2;

            public void run()
            {
                BoggleServer.BoggleServer server = null;
                TcpClient clientOne = null;
                TcpClient clientTwo = null;

                try
                {
                    string[] args = { "200", "../../../Resources/dictionary.txt" };
                    server = new BoggleServer.BoggleServer(args);

                    // create player one connection
                    clientOne = new TcpClient("localhost", 2002);
                    Socket clientOneSocket = clientOne.Client;
                    StringSocket playerOne = new StringSocket(clientOneSocket, new UTF8Encoding());                    

                    // create player two connection
                    clientTwo = new TcpClient("localhost", 2003);
                    Socket clientTwoSocket = clientTwo.Client;
                    StringSocket playerTwo = new StringSocket(clientTwoSocket, new UTF8Encoding());

                    mre1 = new ManualResetEvent(false);
                    mre2 = new ManualResetEvent(false);

                    // have player one join the boggle game
                    playerOne.BeginSend("PLAY Basil\n", (o, e) => { mre1.Set(); }, null);

                    // have player two join the boggle game
                    playerTwo.BeginSend("PLAY Lance\n", (o, e) => { mre2.Set(); }, null);

                    // waits for one second, expecting the callback to trigger the mre1 signal
                    Assert.IsTrue(mre1.WaitOne(1000));

                    // waits for one second, expecting the callback to trigger the mre2 signal
                    Assert.IsTrue(mre2.WaitOne(1000));
                }
                finally
                {
                    server.Stop();
                    clientOne.Close();
                }

            }

        }

        /// <summary>
        /// Tries to create a boggle server with too many arguments
        /// </summary>
        [TestMethod]
        public void TestMethod4()
        {
            // make boggle with too many arguments
            string[] badArgs = { "200", "../../../Resources/dictionary.txt", "ascdefdlsakgldgj", "too many arguments" };
            BoggleServer.BoggleServer badArgServer = new BoggleServer.BoggleServer(badArgs);

            // want to get the result of console as a string?
            //Assert.AreEqual("Invalid number of arguments.", Console.ReadLine().ToString());                
        }

        /// <summary>
        /// Tries to create a boggle server with a string as the time argument that
        /// cannot be parsed to an int
        /// </summary>
        [TestMethod]
        public void TestMethod5()
        {
            // make boggle with too many arguments
            string[] badArgs = { "hello world", "../../../Resources/dictionary.txt" };
            BoggleServer.BoggleServer badArgServer = new BoggleServer.BoggleServer(badArgs);

            // want to get the result of console as a string?            
        }

        /// <summary>
        /// Tries to create a boggle server with a string as the time argument that
        /// can be parsed to an int, but is a negative number
        /// </summary>
        [TestMethod]
        public void TestMethod6()
        {
            // make boggle with too many arguments
            string[] badArgs = { "-200", "../../../Resources/dictionary.txt" };
            BoggleServer.BoggleServer badArgServer = new BoggleServer.BoggleServer(badArgs);

            // want to get the result of console as a string?            
        }

        /// <summary>
        /// Tries to create a boggle server with three parameters, but the third
        /// parameter is not 16 characters long (invalid boggle board size)
        /// </summary>
        [TestMethod]
        public void TestMethod7()
        {             
            // make boggle with too many arguments
            string[] badArgs = { "200", "../../../Resources/dictionary.txt", "jimi" };
            BoggleServer.BoggleServer badArgServer = new BoggleServer.BoggleServer(badArgs);

            // want to get the result of console as a string?            
        }

        /// <summary>
        /// Tries to create a boggle server with three parameters, but the third
        /// parameter contains invalid characters
        /// </summary>
        [TestMethod]
        public void TestMethod8()
        {
            // make boggle with too many arguments
            string[] badArgs1 = { "200", "../../../Resources/dictionary.txt", "jimiergs8tnesaps" };
            string[] badArgs2 = { "200", "../../../Resources/dictionary.txt", "jimiergs*tnesaps" };
            BoggleServer.BoggleServer badArgServer = new BoggleServer.BoggleServer(badArgs1);
            badArgServer = new BoggleServer.BoggleServer(badArgs2);

            // want to get the result of console as a string?            
        }

        /// <summary>
        /// Tries to create a boggle server with empty or null dictionary
        /// </summary>
        [TestMethod]
        public void TestMethod9()
        {
            // make boggle with too many arguments
            string[] badArgs1 = { "200", "", "jimiergsatnesaps" };
            string[] badArgs2 = { "200", null, "jimiergsatnesaps" };
            BoggleServer.BoggleServer badArgServer = new BoggleServer.BoggleServer(badArgs1);
            badArgServer = new BoggleServer.BoggleServer(badArgs2);

            // want to get the result of console as a string?            
        }

        /// <summary>
        /// Tries to create a boggle server with a bad path to dictionary
        /// </summary>
        [TestMethod]
        public void TestMethod10()
        {
            // make boggle with too many arguments
            string[] badArgs = { "200", "dictionary", "jimiergsatnesaps" };            
            BoggleServer.BoggleServer badArgServer = new BoggleServer.BoggleServer(badArgs);            

            // want to get the result of console as a string?            
        }

        /// <summary>
        /// 
        /// </summary>
        [TestMethod]
        public void TestMethod11()
        {
               
        }
     
        // Note: whenever we create new StringSocket connections, use a unique port
    }
}
