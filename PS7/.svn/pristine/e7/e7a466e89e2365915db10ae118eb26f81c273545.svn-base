using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net.Sockets;
using System.Threading;

namespace CustomNetworking
{
    /// <summary>     
    /// 
    /// A StringSocket is a wrapper around a Socket.  It provides methods that
    /// asynchronously read lines of text (strings terminated by newlines) and 
    /// write strings. (As opposed to Sockets, which read and write raw bytes.)  
    ///
    /// StringSockets are thread safe.  This means that two or more threads may
    /// invoke methods on a shared StringSocket without restriction.  The
    /// StringSocket takes care of the synchonization.
    /// 
    /// Each StringSocket contains a Socket object that is provided by the client.  
    /// A StringSocket will work properly only if the client refrains from calling
    /// the contained Socket's read and write methods.
    /// 
    /// If we have an open Socket s, we can create a StringSocket by doing
    /// 
    ///    StringSocket ss = new StringSocket(s, new UTF8Encoding());
    /// 
    /// We can write a string to the StringSocket by doing
    /// 
    ///    ss.BeginSend("Hello world", callback, payload);
    ///    
    /// where callback is a SendCallback (see below) and payload is an arbitrary object.
    /// This is a non-blocking, asynchronous operation.  When the StringSocket has 
    /// successfully written the string to the underlying Socket, or failed in the 
    /// attempt, it invokes the callback.  The parameters to the callback are a
    /// (possibly null) Exception and the payload.  If the Exception is non-null, it is
    /// the Exception that caused the send attempt to fail.
    /// 
    /// We can read a string from the StringSocket by doing
    /// 
    ///     ss.BeginReceive(callback, payload)
    ///     
    /// where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
    /// This is non-blocking, asynchronous operation.  When the StringSocket has read a
    /// string of text terminated by a newline character from the underlying Socket, or
    /// failed in the attempt, it invokes the callback.  The parameters to the callback are
    /// a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
    /// string or the Exception will be non-null, but nor both.  If the string is non-null, 
    /// it is the requested string (with the newline removed).  If the Exception is non-null, 
    /// it is the Exception that caused the send attempt to fail.
    /// </summary>

    public class StringSocket
    {
        // These delegates describe the callbacks that are used for sending and receiving strings.
        public delegate void SendCallback(Exception e, object payload);
        public delegate void ReceiveCallback(String s, Exception e, object payload);

        private Socket socket;
        private Encoding encoding;
        
        // The byte array representation of the string message we are sending
        private Byte[] bytesToSend;
        private Byte[] bytesToReceive;
        int bytesSent;
        int bytesReceived;

        // lock objects
        private Object sendObject;
        private Object receiveObject;
        private Object startSend;
        private Object startReceive;

        /// <summary>
        /// Creates a StringSocket from a regular Socket, which should already be connected.  
        /// The read and write methods of the regular Socket must not be called after the
        /// LineSocket is created.  Otherwise, the StringSocket will not behave properly.  
        /// The encoding to use to convert between raw bytes and strings is also provided.
        /// </summary>
        public StringSocket(Socket s, Encoding e)
        {
            socket = s;
            encoding = e;
            sendObject = new object();
            receiveObject = new object();
            startSend = new object();
        }

        /// <summary>
        /// 
        /// We can write a string to a StringSocket ss by doing
        /// 
        ///    ss.BeginSend("Hello world", callback, payload);
        ///    
        /// where callback is a SendCallback (see below) and payload is an arbitrary object.
        /// This is a non-blocking, asynchronous operation.  When the StringSocket has 
        /// successfully written the string to the underlying Socket, or failed in the 
        /// attempt, it invokes the callback.  The parameters to the callback are a
        /// (possibly null) Exception and the payload.  If the Exception is non-null, it is
        /// the Exception that caused the send attempt to fail. 
        /// 
        /// This method is non-blocking.  This means that it does not wait until the string
        /// has been sent before returning.  Instead, it arranges for the string to be sent
        /// and then returns.  When the send is completed (at some time in the future), the
        /// callback is called on another thread.
        /// 
        /// This method is thread safe.  This means that multiple threads can call BeginSend
        /// on a shared socket without worrying around synchronization.  The implementation of
        /// BeginSend must take care of synchronization instead.  On a given StringSocket, each
        /// string arriving via a BeginSend method call must be sent (in its entirety) before
        /// a later arriving string can be sent.
        /// </summary>
        public void BeginSend(String s, SendCallback callback, object payload)
        {
            lock (startSend)
            {
                // create an array of bytes from the string based on our encoding
                bytesToSend = encoding.GetBytes(s);

                // counter for keeping track of how many bytes have been sent
                bytesSent = 0;

                ThreadPool.QueueUserWorkItem(SendBytes, new SendMessage(s, callback, payload) );
            }
        }
        

        /// <summary>
        /// This is a helper method to send bytes from the socket to the OS. 
        /// </summary>
        /// <param name="message"></param>
        private void SendBytes (Object message)
        {
            // cast the message to a SendMessage object
            SendMessage sm = message as SendMessage;    

            // get bytes from string message
            List<ArraySegment<byte>> bytelist = new List<ArraySegment<byte>>() { new ArraySegment<byte>(bytesToSend, 0, bytesToSend.Length-1) };

            // if any exceptions are caught below, set this equal to that exception
            Exception sendException = null;

            try
            {
                // use the socket data structure to begin sending the bytes to the OS
                socket.BeginSend(bytelist, SocketFlags.None, SendComplete, null);           
            }
            catch(ArgumentNullException e)
            {
                sendException = e;
            }
            catch(ArgumentException e)
            {
                sendException = e;
            }
            catch(SocketException e)
            {
                sendException = e;
            }
            catch(ObjectDisposedException e)
            {
                sendException = e;
            }

            // once we have sent the bytes, call the callback method for the message 
            //with the resulting exception and payload
            sm.callback(sendException, sm.payload);
        }

        /// <summary>
        /// A callback method to tell us if all the bytes have been sent from socket.BeginSend() to
        /// the operating system. 
        /// </summary>
        /// <param name="ar"></param>
        private void SendComplete(IAsyncResult ar)
        {            
            // returns the number of bytes sent in the previous instance of socket.BeginSend()
            bytesSent += socket.EndSend(ar);
                       
            // bytes that have not yet been sent
            int remainingBytes = bytesToSend.Length - bytesSent;

            // if all the bytes have not yet been sent, then BeginSend() again
            if(remainingBytes > 0)
            {
                // get bytes from string message
                List<ArraySegment<byte>> bytelist = new List<ArraySegment<byte>>() { new ArraySegment<byte>(bytesToSend, bytesSent, bytesToSend.Length-1) };
                
                // begin to send more bytes
                socket.BeginSend(bytelist, SocketFlags.None, SendComplete, null);     
            }
        }

        /// <summary>
        /// This is a object/data structure that represents the data received by 
        /// the string socket when BeginSend() is called.
        /// </summary>
        private class SendMessage
        {
            public string message { get; set; }
            public SendCallback callback { get; set; }
            public object payload { get; set; }

            public SendMessage(string s, SendCallback callback, object payload)
            {
                this.message = s;
                this.callback = callback;
                this.payload = payload;
            }

            //public void Callback (Exception e, Object payload)
            //{
            //    this.callback(e, payload);
            //    return;
            //}
        }

        /// <summary>
        /// <para>
        /// We can read a string from the StringSocket by doing
        /// </para>
        /// 
        /// <para>
        ///     ss.BeginReceive(callback, payload)
        /// </para>
        /// 
        /// <para>
        /// where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
        /// This is non-blocking, asynchronous operation.  When the StringSocket has read a
        /// string of text terminated by a newline character from the underlying Socket, or
        /// failed in the attempt, it invokes the callback.  The parameters to the callback are
        /// a (possibly null) string, a (possibly null) Exception, and the payload.  Either the
        /// string or the Exception will be non-null, but nor both.  If the string is non-null, 
        /// it is the requested string (with the newline removed).  If the Exception is non-null, 
        /// it is the Exception that caused the send attempt to fail.
        /// </para>
        /// 
        /// <para>
        /// This method is non-blocking.  This means that it does not wait until a line of text
        /// has been received before returning.  Instead, it arranges for a line to be received
        /// and then returns.  When the line is actually received (at some time in the future), the
        /// callback is called on another thread.
        /// </para>
        /// 
        /// <para>
        /// This method is thread safe.  This means that multiple threads can call BeginReceive
        /// on a shared socket without worrying around synchronization.  The implementation of
        /// BeginReceive must take care of synchronization instead.  On a given StringSocket, each
        /// arriving line of text must be passed to callbacks in the order in which the corresponding
        /// BeginReceive call arrived.
        /// </para>
        /// 
        /// <para>
        /// Note that it is possible for there to be incoming bytes arriving at the underlying Socket
        /// even when there are no pending callbacks.  StringSocket implementations should refrain
        /// from buffering an unbounded number of incoming bytes beyond what is required to service
        /// the pending callbacks.        
        /// </para>
        /// 
        /// <param name="callback"> The function to call upon receiving the data</param>
        /// <param name="payload"> 
        /// The payload is "remembered" so that when the callback is invoked, it can be associated
        /// with a specific Begin Receiver....
        /// </param>  
        /// 
        /// <example>
        ///   Here is how you might use this code:
        ///   <code>
        ///                    client = new TcpClient("localhost", port);
        ///                    Socket       clientSocket = client.Client;
        ///                    StringSocket receiveSocket = new StringSocket(clientSocket, new UTF8Encoding());
        ///                    receiveSocket.BeginReceive(CompletedReceive1, 1);
        /// 
        ///   </code>
        /// </example>
        /// </summary>
        /// 
        /// 

        public void BeginReceive(ReceiveCallback callback, object payload)
        {
        }

        /// <summary>
        /// Calling the close method will close the String Socket (and the underlying
        /// standard socket).  The close method  should make sure all 
        ///
        /// Note: ideally the close method should make sure all pending data is sent
        ///       
        /// Note: closing the socket should discard any remaining messages and       
        ///       disable receiving new messages
        /// 
        /// Note: Make sure to shutdown the socket before closing it.
        ///
        /// Note: the socket should not be used after closing.
        /// </summary>
        public void Close()
        {

        }
    }
 }