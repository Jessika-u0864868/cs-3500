// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// SimpleFormulaTest - Use 'SimpleFormulaTestParams' to pass parameters into this method.
        /// </summary>
        public void SimpleFormulaTest()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(@"..\..\..\SpreadsheetGUI\bin\debug\SpreadsheetGUI.exe");

            // Type '=1+1' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SimpleFormulaTestParams.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.SimpleFormulaTestParams.UICellContentsBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// SimpleFormulaTest_Assertion1 - Use 'SimpleFormulaTest_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SimpleFormulaTest_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellValueBoxEdit = this.UISpreadsheet1Window.UICellValueBoxWindow.UICellValueBoxEdit;
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValueBox' text box equals '2'
            Assert.AreEqual(this.SimpleFormulaTest_Assertion1ExpectedValues.UICellValueBoxEditText, uICellValueBoxEdit.Text, "Should be 2");

            // Verify that the 'Text' property of 'cellContentsBox' text box equals '=1+1'
            Assert.AreEqual(this.SimpleFormulaTest_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should be =1+1");
        }
        
        /// <summary>
        /// CloseFormTest
        /// </summary>
        public void CloseFormTest()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheet1Window.UISpreadsheet1TitleBar.UICloseButton;
            WinButton uINOButton = this.UISaveBeforeExitingWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 12));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(36, 15));
        }
        
        #region Properties
        public virtual SimpleFormulaTestParams SimpleFormulaTestParams
        {
            get
            {
                if ((this.mSimpleFormulaTestParams == null))
                {
                    this.mSimpleFormulaTestParams = new SimpleFormulaTestParams();
                }
                return this.mSimpleFormulaTestParams;
            }
        }
        
        public virtual SimpleFormulaTest_Assertion1ExpectedValues SimpleFormulaTest_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mSimpleFormulaTest_Assertion1ExpectedValues == null))
                {
                    this.mSimpleFormulaTest_Assertion1ExpectedValues = new SimpleFormulaTest_Assertion1ExpectedValues();
                }
                return this.mSimpleFormulaTest_Assertion1ExpectedValues;
            }
        }
        
        public UISpreadsheet1Window UISpreadsheet1Window
        {
            get
            {
                if ((this.mUISpreadsheet1Window == null))
                {
                    this.mUISpreadsheet1Window = new UISpreadsheet1Window();
                }
                return this.mUISpreadsheet1Window;
            }
        }
        
        public UISaveBeforeExitingWindow UISaveBeforeExitingWindow
        {
            get
            {
                if ((this.mUISaveBeforeExitingWindow == null))
                {
                    this.mUISaveBeforeExitingWindow = new UISaveBeforeExitingWindow();
                }
                return this.mUISaveBeforeExitingWindow;
            }
        }
        #endregion
        
        #region Fields
        private SimpleFormulaTestParams mSimpleFormulaTestParams;
        
        private SimpleFormulaTest_Assertion1ExpectedValues mSimpleFormulaTest_Assertion1ExpectedValues;
        
        private UISpreadsheet1Window mUISpreadsheet1Window;
        
        private UISaveBeforeExitingWindow mUISaveBeforeExitingWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SimpleFormulaTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SimpleFormulaTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=1+1' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "=1+1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SimpleFormulaTest_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SimpleFormulaTest_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueBox' text box equals '2'
        /// </summary>
        public string UICellValueBoxEditText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals '=1+1'
        /// </summary>
        public string UICellContentsBoxEditText = "=1+1";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet1Window : WinWindow
    {
        
        public UISpreadsheet1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public UICellContentsBoxWindow UICellContentsBoxWindow
        {
            get
            {
                if ((this.mUICellContentsBoxWindow == null))
                {
                    this.mUICellContentsBoxWindow = new UICellContentsBoxWindow(this);
                }
                return this.mUICellContentsBoxWindow;
            }
        }
        
        public UICellValueBoxWindow UICellValueBoxWindow
        {
            get
            {
                if ((this.mUICellValueBoxWindow == null))
                {
                    this.mUICellValueBoxWindow = new UICellValueBoxWindow(this);
                }
                return this.mUICellValueBoxWindow;
            }
        }
        
        public UISpreadsheet1TitleBar UISpreadsheet1TitleBar
        {
            get
            {
                if ((this.mUISpreadsheet1TitleBar == null))
                {
                    this.mUISpreadsheet1TitleBar = new UISpreadsheet1TitleBar(this);
                }
                return this.mUISpreadsheet1TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsBoxWindow mUICellContentsBoxWindow;
        
        private UICellValueBoxWindow mUICellValueBoxWindow;
        
        private UISpreadsheet1TitleBar mUISpreadsheet1TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellContentsBoxWindow : WinWindow
    {
        
        public UICellContentsBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsBox";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsBoxEdit
        {
            get
            {
                if ((this.mUICellContentsBoxEdit == null))
                {
                    this.mUICellContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "F(x)";
                    this.mUICellContentsBoxEdit.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUICellContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellValueBoxWindow : WinWindow
    {
        
        public UICellValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueBox";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueBoxEdit
        {
            get
            {
                if ((this.mUICellValueBoxEdit == null))
                {
                    this.mUICellValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueBoxEdit.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUICellValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet1TitleBar : WinTitleBar
    {
        
        public UISpreadsheet1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveBeforeExitingWindow : WinWindow
    {
        
        public UISaveBeforeExitingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Before Exiting?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save Before Exiting?");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Save Before Exiting?");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Save Before Exiting?");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
