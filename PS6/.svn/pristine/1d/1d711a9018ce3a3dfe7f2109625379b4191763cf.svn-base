// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// CloseFormTest
        /// </summary>
        public void CloseFormTest()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheet1Window.UISpreadsheet1TitleBar.UICloseButton;
            WinButton uINOButton = this.UISaveBeforeExitingWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 12));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(36, 15));
        }
        
        /// <summary>
        /// SimpleFormulaTest - Use 'SimpleFormulaTestParams' to pass parameters into this method.
        /// </summary>
        public void SimpleFormulaTest()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.SimpleFormulaTestParams.UISpreadsheet1WindowExePath, this.SimpleFormulaTestParams.UISpreadsheet1WindowAlternateExePath);

            // Type '=1+1' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SimpleFormulaTestParams.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.SimpleFormulaTestParams.UICellContentsBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// SimpleFormulaTest_Assertion1 - Use 'SimpleFormulaTest_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SimpleFormulaTest_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellValueBoxEdit = this.UISpreadsheet1Window.UICellValueBoxWindow.UICellValueBoxEdit;
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValueBox' text box equals '2'
            Assert.AreEqual(this.SimpleFormulaTest_Assertion1ExpectedValues.UICellValueBoxEditText, uICellValueBoxEdit.Text, "Should be 2");

            // Verify that the 'Text' property of 'cellContentsBox' text box equals '=1+1'
            Assert.AreEqual(this.SimpleFormulaTest_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should be =1+1");
        }
        
        /// <summary>
        /// FormulaErrorTest1 - Use 'FormulaErrorTest1Params' to pass parameters into this method.
        /// </summary>
        public void FormulaErrorTest1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.FormulaErrorTest1Params.UISpreadsheet1WindowExePath, this.FormulaErrorTest1Params.UISpreadsheet1WindowAlternateExePath);

            // Type '=1/0' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.FormulaErrorTest1Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.FormulaErrorTest1Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// FormulaErrorTest1_Assertion1 - Use 'FormulaErrorTest1_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void FormulaErrorTest1_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellValueBoxEdit = this.UISpreadsheet1Window.UICellValueBoxWindow.UICellValueBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValueBox' text box equals 'Error: Divide by Zero'
            Assert.AreEqual(this.FormulaErrorTest1_Assertion1ExpectedValues.UICellValueBoxEditText, uICellValueBoxEdit.Text, "Should be Divide by Zero");
        }
        
        /// <summary>
        /// FormulaErrorTest2 - Use 'FormulaErrorTest2Params' to pass parameters into this method.
        /// </summary>
        public void FormulaErrorTest2()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.FormulaErrorTest2Params.UISpreadsheet1WindowExePath, this.FormulaErrorTest2Params.UISpreadsheet1WindowAlternateExePath);

            // Type '=B2' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.FormulaErrorTest2Params.UICellContentsBoxEditText;
        }
        
        /// <summary>
        /// FormulaErrorTest2_Assertion1 - Use 'FormulaErrorTest2_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void FormulaErrorTest2_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellValueBoxEdit = this.UISpreadsheet1Window.UICellValueBoxWindow.UICellValueBoxEdit;
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValueBox' text box equals 'Error: Your Variable is Undefined'
            Assert.AreEqual(this.FormulaErrorTest2_Assertion1ExpectedValues.UICellValueBoxEditText, uICellValueBoxEdit.Text, "Should be Error: Your Variable is Undefined");

            // Verify that the 'Text' property of 'cellContentsBox' text box equals '=B2'
            Assert.AreEqual(this.FormulaErrorTest2_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should be =B2");
        }
        
        /// <summary>
        /// InvalidFormulaTest1 - Use 'InvalidFormulaTest1Params' to pass parameters into this method.
        /// </summary>
        public void InvalidFormulaTest1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinButton uIOKButton = this.UIFormulaFormatErrorWindow.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.InvalidFormulaTest1Params.UISpreadsheet1WindowExePath, this.InvalidFormulaTest1Params.UISpreadsheet1WindowAlternateExePath);

            // Type '=z100' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.InvalidFormulaTest1Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.InvalidFormulaTest1Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(37, 13));

            // Type '=kshjdfs' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.InvalidFormulaTest1Params.UICellContentsBoxEditText1;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.InvalidFormulaTest1Params.UICellContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(38, 18));
        }
        
        /// <summary>
        /// InvalidFormulaTest1_Assertion1 - Use 'InvalidFormulaTest1_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void InvalidFormulaTest1_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinEdit uICellValueBoxEdit = this.UISpreadsheet1Window.UICellValueBoxWindow.UICellValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheet1Window.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsBox' text box equals ''
            Assert.AreEqual(this.InvalidFormulaTest1_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should be empty");

            // Verify that the 'Text' property of 'cellValueBox' text box equals ''
            Assert.AreEqual(this.InvalidFormulaTest1_Assertion1ExpectedValues.UICellValueBoxEditText, uICellValueBoxEdit.Text, "Should be empty");

            // Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
            Assert.AreEqual(this.InvalidFormulaTest1_Assertion1ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text, "Should be A1");
        }
        
        /// <summary>
        /// SimpleFormulaTest2 - Use 'SimpleFormulaTest2Params' to pass parameters into this method.
        /// </summary>
        public void SimpleFormulaTest2()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.SimpleFormulaTest2Params.UISpreadsheet1WindowExePath, this.SimpleFormulaTest2Params.UISpreadsheet1WindowAlternateExePath);

            // Type '2' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SimpleFormulaTest2Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.SimpleFormulaTest2Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(52, 63));

            // Type '4' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SimpleFormulaTest2Params.UICellContentsBoxEditText1;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.SimpleFormulaTest2Params.UICellContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(71, 80));

            // Type '3' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SimpleFormulaTest2Params.UICellContentsBoxEditText2;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.SimpleFormulaTest2Params.UICellContentsBoxEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(66, 96));

            // Type '1' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SimpleFormulaTest2Params.UICellContentsBoxEditText3;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.SimpleFormulaTest2Params.UICellContentsBoxEditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(68, 118));

            // Type '5' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SimpleFormulaTest2Params.UICellContentsBoxEditText4;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.SimpleFormulaTest2Params.UICellContentsBoxEditSendKeys4, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(68, 147));

            // Type '=A1+A2-A3*A4/A5' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SimpleFormulaTest2Params.UICellContentsBoxEditText5;
        }
        
        /// <summary>
        /// SimpleFormulaTest2_Assertion1 - Use 'SimpleFormulaTest2_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SimpleFormulaTest2_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellNameBoxEdit = this.UISpreadsheet1Window.UIA1Window.UICellNameBoxEdit;
            WinEdit uICellValueBoxEdit = this.UISpreadsheet1Window.UICellValueBoxWindow.UICellValueBoxEdit;
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellNameBox' text box equals 'A6'
            Assert.AreEqual(this.SimpleFormulaTest2_Assertion1ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text, "Should be A6");

            // Verify that the 'Text' property of 'cellValueBox' text box equals '5.4'
            Assert.AreEqual(this.SimpleFormulaTest2_Assertion1ExpectedValues.UICellValueBoxEditText, uICellValueBoxEdit.Text, "Should be 5.4");

            // Verify that the 'Text' property of 'cellContentsBox' text box equals '=A1+A2-A3*A4/A5'
            Assert.AreEqual(this.SimpleFormulaTest2_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should be =A1+A2-A3*A4/A5");
        }
        
        /// <summary>
        /// RetryFormulaErrorTest1 - Use 'RetryFormulaErrorTest1Params' to pass parameters into this method.
        /// </summary>
        public void RetryFormulaErrorTest1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.RetryFormulaErrorTest1Params.UISpreadsheet1WindowExePath, this.RetryFormulaErrorTest1Params.UISpreadsheet1WindowAlternateExePath);

            // Type '=B1' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.RetryFormulaErrorTest1Params.UICellContentsBoxEditText;
        }
        
        /// <summary>
        /// RetryFormulaErrorTest1_Assertion1 - Use 'RetryFormulaErrorTest1_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void RetryFormulaErrorTest1_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellValueBoxEdit = this.UISpreadsheet1Window.UICellValueBoxWindow.UICellValueBoxEdit;
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheet1Window.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValueBox' text box equals 'Error: Your Variable is Undefined'
            Assert.AreEqual(this.RetryFormulaErrorTest1_Assertion1ExpectedValues.UICellValueBoxEditText, uICellValueBoxEdit.Text, "Should be Error: Your Variable is Undefined");

            // Verify that the 'Text' property of 'cellContentsBox' text box equals '=B1'
            Assert.AreEqual(this.RetryFormulaErrorTest1_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should be =B1");

            // Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
            Assert.AreEqual(this.RetryFormulaErrorTest1_Assertion1ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text, "Should be A1");
        }
        
        /// <summary>
        /// HelpTest1 - Use 'HelpTest1Params' to pass parameters into this method.
        /// </summary>
        public void HelpTest1()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIHelpMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.HelpTest1Params.UISpreadsheet1WindowExePath, this.HelpTest1Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(24, 3));
        }
        
        /// <summary>
        /// HelpTest2 - Use 'HelpTest2Params' to pass parameters into this method.
        /// </summary>
        public void HelpTest2()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIHelpMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.HelpTest2Params.UISpreadsheet1WindowExePath, this.HelpTest2Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(25, 9));
        }
        
        /// <summary>
        /// HelpTest2_Assertion1 - Use 'HelpTest2_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HelpTest2_Assertion1()
        {
            #region Variable Declarations
            WinTitleBar uIHelpTitleBar = this.UIHelpWindow.UIHelpTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Help' title bar equals 'Help'
            Assert.AreEqual(this.HelpTest2_Assertion1ExpectedValues.UIHelpTitleBarDisplayText, uIHelpTitleBar.DisplayText, "Should say Help");
        }
        
        /// <summary>
        /// NewTest1 - Use 'NewTest1Params' to pass parameters into this method.
        /// </summary>
        public void NewTest1()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.NewTest1Params.UISpreadsheet1WindowExePath, this.NewTest1Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(29, 6));
        }
        
        /// <summary>
        /// NewTest1_Assertion1 - Use 'NewTest1_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void NewTest1_Assertion1()
        {
            #region Variable Declarations
            WinTitleBar uISpreadsheet2TitleBar = this.UISpreadsheet2Window.UISpreadsheet2TitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Spreadsheet2' title bar equals 'Spreadsheet2'
            Assert.AreEqual(this.NewTest1_Assertion1ExpectedValues.UISpreadsheet2TitleBarDisplayText, uISpreadsheet2TitleBar.DisplayText, "Should say Spreadsheet2");
        }
        
        /// <summary>
        /// OpenTest1 - Use 'OpenTest1Params' to pass parameters into this method.
        /// </summary>
        public void OpenTest1()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.OpenTest1Params.UISpreadsheet1WindowExePath, this.OpenTest1Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(35, 1));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(6, 7));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(33, 12));
        }
        
        /// <summary>
        /// OpenTest1_Assertion1 - Use 'OpenTest1_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void OpenTest1_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UICUsersBasilDocumentsWindow.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinEdit uICellValueBoxEdit = this.UICUsersBasilDocumentsWindow.UICellValueBoxWindow.UICellValueBoxEdit;
            WinEdit uICellNameBoxEdit = this.UICUsersBasilDocumentsWindow.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsBox' text box equals 'hello world'
            Assert.AreEqual(this.OpenTest1_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should say hello world");

            // Verify that the 'Text' property of 'cellValueBox' text box equals 'hello world'
            Assert.AreEqual(this.OpenTest1_Assertion1ExpectedValues.UICellValueBoxEditText, uICellValueBoxEdit.Text, "Should say hello world");

            // Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
            Assert.AreEqual(this.OpenTest1_Assertion1ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text, "Should say A1");
        }
        
        /// <summary>
        /// ChangedTest1 - Use 'ChangedTest1Params' to pass parameters into this method.
        /// </summary>
        public void ChangedTest1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinButton uIEvaluateButton = this.UISpreadsheet1Window.UIEvaluateWindow.UIEvaluateButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.ChangedTest1Params.UISpreadsheet1WindowExePath, this.ChangedTest1Params.UISpreadsheet1WindowAlternateExePath);

            // Type 'hello mom' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.ChangedTest1Params.UICellContentsBoxEditText;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(35, 12));
        }
        
        /// <summary>
        /// ChangedTest1_Assertion1 - Use 'ChangedTest1_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ChangedTest1_Assertion1()
        {
            #region Variable Declarations
            WinText uIUnsavedChangesExistText = this.UISpreadsheet1Window.UIStatusStrip1StatusBar.UIUnsavedChangesExistText;
            #endregion

            // Verify that the 'Name' property of 'Unsaved Changes Exist' label equals 'Unsaved Changes Exist'
            Assert.AreEqual(this.ChangedTest1_Assertion1ExpectedValues.UIUnsavedChangesExistTextName, uIUnsavedChangesExistText.Name, "Should be Unsaved Changes Exist");
        }
        
        /// <summary>
        /// ChangedTest2 - Use 'ChangedTest2Params' to pass parameters into this method.
        /// </summary>
        public void ChangedTest2()
        {
            #region Variable Declarations
            WinMenuBar uIMenuStrip1MenuBar = this.UISpreadsheet1Window.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinClient uISpreadsheet1Client = this.UISpreadsheet1Window.UISpreadsheet1Client;
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinButton uICloseButton = this.UISpreadsheet1Window.UISpreadsheet1TitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.ChangedTest2Params.UISpreadsheet1WindowExePath, this.ChangedTest2Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'menuStrip1' menu bar
            Mouse.Click(uIMenuStrip1MenuBar, new Point(295, 23));

            // Click 'Spreadsheet1' client
            Mouse.Click(uISpreadsheet1Client, new Point(295, 24));

            // Type 'hello TA' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.ChangedTest2Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.ChangedTest2Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 13));
        }
        
        /// <summary>
        /// ChangedTest2_Assertion1 - Use 'ChangedTest2_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ChangedTest2_Assertion1()
        {
            #region Variable Declarations
            WinTitleBar uISaveBeforeExitingTitleBar = this.UISaveBeforeExitingWindow.UISaveBeforeExitingTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Save Before Exiting?' title bar equals 'Save Before Exiting?'
            Assert.AreEqual(this.ChangedTest2_Assertion1ExpectedValues.UISaveBeforeExitingTitleBarDisplayText, uISaveBeforeExitingTitleBar.DisplayText, "Should be Save Before Exiting?");
        }
        
        /// <summary>
        /// SaveTestOverwrite - Use 'SaveTestOverwriteParams' to pass parameters into this method.
        /// </summary>
        public void SaveTestOverwrite()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinButton uIEvaluateButton = this.UISpreadsheet1Window.UIEvaluateWindow.UIEvaluateButton;
            WinMenuItem uISaveMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uINameEdit = this.UISaveWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.SaveTestOverwriteParams.UISpreadsheet1WindowExePath, this.SaveTestOverwriteParams.UISpreadsheet1WindowAlternateExePath);

            // Type 'HELLO' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SaveTestOverwriteParams.UICellContentsBoxEditText;

            // Click 'Evaluate' button
            Mouse.Click(uIEvaluateButton, new Point(17, 15));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(47, 6));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(31, 16));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(32, 17));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(13, 11));
        }
        
        /// <summary>
        /// SaveTestOverwrite_Assertion1 - Use 'SaveTestOverwrite_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SaveTestOverwrite_Assertion1()
        {
            #region Variable Declarations
            WinTitleBar uIWarningTitleBar = this.UIWarningWindow.UIWarningTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Warning' title bar equals 'Warning'
            Assert.AreEqual(this.SaveTestOverwrite_Assertion1ExpectedValues.UIWarningTitleBarDisplayText, uIWarningTitleBar.DisplayText, "Should be Warning");
        }
        
        /// <summary>
        /// CircularRefTest1 - Use 'CircularRefTest1Params' to pass parameters into this method.
        /// </summary>
        public void CircularRefTest1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UICircularReferenceErrWindow.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.CircularRefTest1Params.UISpreadsheet1WindowExePath, this.CircularRefTest1Params.UISpreadsheet1WindowAlternateExePath);

            // Type '1' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest1Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.CircularRefTest1Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(171, 37));

            // Type '=A1' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest1Params.UICellContentsBoxEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(51, 42));

            // Type '=b1' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest1Params.UICellContentsBoxEditText2;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.CircularRefTest1Params.UICellContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(27, 11));
        }
        
        /// <summary>
        /// CircularRefTest1_Assertion1 - Use 'CircularRefTest1_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CircularRefTest1_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsBox' text box equals '1'
            Assert.AreEqual(this.CircularRefTest1_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should be 1, not B2");
        }
        
        /// <summary>
        /// NewTest2 - Use 'NewTest2Params' to pass parameters into this method.
        /// </summary>
        public void NewTest2()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uINewMenuItem1 = this.UISpreadsheet2Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.NewTest2Params.UISpreadsheet1WindowExePath, this.NewTest2Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(38, 8));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(41, 12));
        }
        
        /// <summary>
        /// NewTest2_Assertion1 - Use 'NewTest2_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void NewTest2_Assertion1()
        {
            #region Variable Declarations
            WinTitleBar uISpreadsheet3TitleBar = this.UISpreadsheet3Window.UISpreadsheet3TitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Spreadsheet3' title bar equals 'Spreadsheet3'
            Assert.AreEqual(this.NewTest2_Assertion1ExpectedValues.UISpreadsheet3TitleBarDisplayText, uISpreadsheet3TitleBar.DisplayText, "Should be Spreadsheet3");
        }
        
        /// <summary>
        /// SaveAndOpenTest1 - Use 'SaveAndOpenTest1Params' to pass parameters into this method.
        /// </summary>
        public void SaveAndOpenTest1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinMenuItem uISaveMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uINewMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheet2Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UISaveandopentestsprdListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.SaveAndOpenTest1Params.UISpreadsheet1WindowExePath, this.SaveAndOpenTest1Params.UISpreadsheet1WindowAlternateExePath);

            // Type 'save and open test' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SaveAndOpenTest1Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.SaveAndOpenTest1Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(34, 12));

            // Select 'saveandopentest' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAndOpenTest1Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(11, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(23, 14));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(78, 66));

            // Type 'make a new file' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SaveAndOpenTest1Params.UICellContentsBoxEditText1;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.SaveAndOpenTest1Params.UICellContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(24, 12));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(36, 7));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(24, 12));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(26, 11));
        }
        
        /// <summary>
        /// SaveAndOpenTest1_Assertion1 - Use 'SaveAndOpenTest1_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SaveAndOpenTest1_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UICUsersBasilDocumentsWindow1.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinTitleBar uICUsersBasilDocumentsTitleBar = this.UICUsersBasilDocumentsWindow1.UICUsersBasilDocumentsTitleBar;
            #endregion

            // Verify that the 'Text' property of 'cellContentsBox' text box equals 'save and open test'
            Assert.AreEqual(this.SaveAndOpenTest1_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should be save and open test");

            // Verify that the 'DisplayText' property of 'C:\Users\Basil\Documents\Visual Studio 2013\Projec...' title bar equals 'C:\Users\Basil\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\saveandopentest.sprd'
            Assert.AreEqual(this.SaveAndOpenTest1_Assertion1ExpectedValues.UICUsersBasilDocumentsTitleBarDisplayText, uICUsersBasilDocumentsTitleBar.DisplayText, "Should be file path");
        }
        
        /// <summary>
        /// SaveAndOpenTest2 - Use 'SaveAndOpenTest2Params' to pass parameters into this method.
        /// </summary>
        public void SaveAndOpenTest2()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinMenuItem uISaveMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinMenuItem uINewMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinEdit uICellContentsBoxEdit1 = this.UISpreadsheet2Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheet2Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIChangesprdListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.SaveAndOpenTest2Params.UISpreadsheet1WindowExePath, this.SaveAndOpenTest2Params.UISpreadsheet1WindowAlternateExePath);

            // Type 'change' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.SaveAndOpenTest2Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.SaveAndOpenTest2Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(58, 5));

            // Select 'change' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAndOpenTest2Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(55, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(29, 19));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(31, 2));

            // Type 'another change' in 'cellContentsBox' text box
            uICellContentsBoxEdit1.Text = this.SaveAndOpenTest2Params.UICellContentsBoxEditText1;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit1, this.SaveAndOpenTest2Params.UICellContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(29, 15));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(39, 11));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(36, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(29, 11));
        }
        
        /// <summary>
        /// SaveAndOpenTest2_Assertion1 - Use 'SaveAndOpenTest2_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SaveAndOpenTest2_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UICUsersBasilDocumentsWindow2.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinTitleBar uICUsersBasilDocumentsTitleBar = this.UICUsersBasilDocumentsWindow2.UICUsersBasilDocumentsTitleBar;
            #endregion

            // Verify that the 'Text' property of 'cellContentsBox' text box equals 'change'
            Assert.AreEqual(this.SaveAndOpenTest2_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should be \'change\'");

            // Verify that the 'DisplayText' property of 'C:\Users\Basil\Documents\Visual Studio 2013\Projec...' title bar equals 'C:\Users\Basil\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\change.sprd'
            Assert.AreEqual(this.SaveAndOpenTest2_Assertion1ExpectedValues.UICUsersBasilDocumentsTitleBarDisplayText, uICUsersBasilDocumentsTitleBar.DisplayText, "Should be file path");
        }
        
        /// <summary>
        /// CircularRefTest2 - Use 'CircularRefTest2Params' to pass parameters into this method.
        /// </summary>
        public void CircularRefTest2()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UICircularReferenceErrWindow.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.CircularRefTest2Params.UISpreadsheet1WindowExePath, this.CircularRefTest2Params.UISpreadsheet1WindowAlternateExePath);

            // Type '2' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest2Params.UICellContentsBoxEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(74, 62));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(71, 42));

            // Type '2' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest2Params.UICellContentsBoxEditText1;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.CircularRefTest2Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(80, 67));

            // Type '3' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest2Params.UICellContentsBoxEditText2;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.CircularRefTest2Params.UICellContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(66, 81));

            // Type '=A1' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest2Params.UICellContentsBoxEditText3;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(54, 56));

            // Type '=A3' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest2Params.UICellContentsBoxEditText4;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(67, 37));

            // Type '=a2' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest2Params.UICellContentsBoxEditText5;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.CircularRefTest2Params.UICellContentsBoxEditSendKeys2, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(22, 13));
        }
        
        /// <summary>
        /// CircularRefTest2_Assertion1 - Use 'CircularRefTest2_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CircularRefTest2_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheet1Window.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsBox' text box equals '2'
            Assert.AreEqual(this.CircularRefTest2_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should be 2");

            // Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
            Assert.AreEqual(this.CircularRefTest2_Assertion1ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text, "Should be A1");
        }
        
        /// <summary>
        /// CloseTest1 - Use 'CloseTest1Params' to pass parameters into this method.
        /// </summary>
        public void CloseTest1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinMenuItem uICloseMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uICancelButton = this.UISaveBeforeExitingWindow.UICancelWindow.UICancelButton;
            WinButton uICloseButton = this.UISpreadsheet1Window.UISpreadsheet1TitleBar.UICloseButton;
            WinButton uIYesButton = this.UISaveBeforeExitingWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uIYesButton1 = this.UIWarningWindow.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.CloseTest1Params.UISpreadsheet1WindowExePath, this.CloseTest1Params.UISpreadsheet1WindowAlternateExePath);

            // Type 'asgfsd' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CloseTest1Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.CloseTest1Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(36, 8));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(41, 19));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 13));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(23, 20));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(43, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(15, 11));

            // Select 'something' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.CloseTest1Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(31, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(37, 17));
        }
        
        /// <summary>
        /// CloseHelpTest - Use 'CloseHelpTestParams' to pass parameters into this method.
        /// </summary>
        public void CloseHelpTest()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinMenuItem uIHelpMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinButton uIOKButton = this.UIHelpWindow.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UISpreadsheet1Window.UISpreadsheet1TitleBar.UICloseButton;
            WinButton uIYesButton = this.UISaveBeforeExitingWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uIYesButton1 = this.UIWarningWindow.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.CloseHelpTestParams.UISpreadsheet1WindowExePath, this.CloseHelpTestParams.UISpreadsheet1WindowAlternateExePath);

            // Type 'help' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CloseHelpTestParams.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.CloseHelpTestParams.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(20, 3));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(17, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(18, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(19, 5));

            // Select 'help' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.CloseHelpTestParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(31, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(25, 5));
        }
        
        /// <summary>
        /// CloseTest2 - Use 'CloseTest2Params' to pass parameters into this method.
        /// </summary>
        public void CloseTest2()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uICloseMenuItem = this.UISpreadsheet2Window.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinButton uICloseButton = this.UISpreadsheet1Window.UISpreadsheet1TitleBar.UICloseButton;
            WinButton uIYesButton = this.UISaveBeforeExitingWindow.UIYesWindow.UIYesButton;
            WinButton uICancelButton = this.UISaveWindow.UICancelWindow.UICancelButton;
            WinMenuItem uICloseMenuItem1 = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.CloseTest2Params.UISpreadsheet1WindowExePath, this.CloseTest2Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(26, 4));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(25, 9));

            // Type 'sds' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CloseTest2Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.CloseTest2Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 4));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(27, 16));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(36, 17));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem1, new Point(22, 4));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(12, 10));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(21, 14));
        }
        
        /// <summary>
        /// OpenTest2 - Use 'OpenTest2Params' to pass parameters into this method.
        /// </summary>
        public void OpenTest2()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinMenuItem uISaveMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinMenuItem uINewMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheet2Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinEdit uICellContentsBoxEdit1 = this.UISpreadsheet2Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinMenuBar uIMenuStrip1MenuBar = this.UISpreadsheet2Window.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIOpensprdListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinButton uICloseButton = this.UISpreadsheet2Window.UISpreadsheet2TitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.OpenTest2Params.UISpreadsheet1WindowExePath, this.OpenTest2Params.UISpreadsheet1WindowAlternateExePath);

            // Type 'savethis' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.OpenTest2Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.OpenTest2Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(28, 10));

            // Select 'open' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenTest2Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(22, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(28, 13));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(26, 15));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(36, 4));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(62, 10));

            // Type 'bla' in 'cellContentsBox' text box
            uICellContentsBoxEdit1.Text = this.OpenTest2Params.UICellContentsBoxEditText1;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit1, this.OpenTest2Params.UICellContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'menuStrip1' menu bar
            Mouse.Click(uIMenuStrip1MenuBar, new Point(23, 23));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(44, 10));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(16, 18));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(10, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(42, 13));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(36, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(31, 14));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(27, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(17, 10));
        }
        
        /// <summary>
        /// OpenTest3 - Use 'OpenTest3Params' to pass parameters into this method.
        /// </summary>
        public void OpenTest3()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinMenuItem uISaveMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveWindow.UISaveWindow1.UISaveButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinMenuItem uINewMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinWindow uICellContentsBoxWindow = this.UISpreadsheet2Window.UISpreadsheet2Client.UICellContentsBoxWindow;
            WinEdit uICellContentsBoxEdit1 = this.UISpreadsheet2Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinMenuItem uIOpenMenuItem1 = this.UISpreadsheet2Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UISavethisspreadsheetsListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.OpenTest3Params.UISpreadsheet1WindowExePath, this.OpenTest3Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(31, 3));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(29, 7));

            // Type 'savethis' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.OpenTest3Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.OpenTest3Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(29, 15));

            // Select 'savethisspreadsheet' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenTest3Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(24, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(22, 6));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(30, 10));

            // Click 'cellContentsBox' window
            Mouse.Click(uICellContentsBoxWindow, new Point(36, 18));

            // Type '42' in 'cellContentsBox' text box
            uICellContentsBoxEdit1.Text = this.OpenTest3Params.UICellContentsBoxEditText1;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit1, this.OpenTest3Params.UICellContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(25, 16));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(42, 14));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(27, 14));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(29, 7));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(28, 14));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(91, 5));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(37, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(38, 12));
        }
        
        /// <summary>
        /// OpenTest3_Assertion1 - Use 'OpenTest3_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void OpenTest3_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet2Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinEdit uICellNameBoxEdit = this.UISpreadsheet2Window.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellContentsBox' text box equals 'savethis'
            Assert.AreEqual(this.OpenTest3_Assertion1ExpectedValues.UICellContentsBoxEditText, uICellContentsBoxEdit.Text, "Should be savethis");

            // Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
            Assert.AreEqual(this.OpenTest3_Assertion1ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text, "Should be A1");
        }
        
        /// <summary>
        /// ReadFileErrorTest1 - Use 'ReadFileErrorTest1Params' to pass parameters into this method.
        /// </summary>
        public void ReadFileErrorTest1()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenWindow.UIItemWindow1.UIFilesoftypeComboBox;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITexttxtListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinButton uIOKButton = this.UIErrorReadingSpreadshWindow.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.ReadFileErrorTest1Params.UISpreadsheet1WindowExePath, this.ReadFileErrorTest1Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(33, 5));

            // Select 'All Files (*.*)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.ReadFileErrorTest1Params.UIFilesoftypeComboBoxSelectedItem;

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(23, 9));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(23, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(34, 12));
        }
        
        /// <summary>
        /// ReadFileErrorTest2 - Use 'ReadFileErrorTest2Params' to pass parameters into this method.
        /// </summary>
        public void ReadFileErrorTest2()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenWindow.UIItemWindow1.UIFilesoftypeComboBox;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITexttxtListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinButton uIOKButton = this.UIErrorReadingSpreadshWindow.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.ReadFileErrorTest2Params.UISpreadsheet1WindowExePath, this.ReadFileErrorTest2Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(43, 13));

            // Select 'All Files (*.*)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.ReadFileErrorTest2Params.UIFilesoftypeComboBoxSelectedItem;

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(61, 14));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(18, 3));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(29, 4));
        }
        
        /// <summary>
        /// ReadFileErrorTest2_Assertion1 - Use 'ReadFileErrorTest2_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ReadFileErrorTest2_Assertion1()
        {
            #region Variable Declarations
            WinEdit uICellNameBoxEdit = this.UICUsersBasilDocumentsWindow3.UIA1Window.UICellNameBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
            Assert.AreEqual(this.ReadFileErrorTest2_Assertion1ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text, "Should be A1");
        }
        
        /// <summary>
        /// CircularRefTest3 - Use 'CircularRefTest3Params' to pass parameters into this method.
        /// </summary>
        public void CircularRefTest3()
        {
            #region Variable Declarations
            WinEdit uICellContentsBoxEdit = this.UISpreadsheet1Window.UICellContentsBoxWindow.UICellContentsBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheet1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinWindow uICellContentsBoxWindow = this.UISpreadsheet1Window.UISpreadsheet1Client.UICellContentsBoxWindow;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.CircularRefTest3Params.UISpreadsheet1WindowExePath, this.CircularRefTest3Params.UISpreadsheet1WindowAlternateExePath);

            // Type '1' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest3Params.UICellContentsBoxEditText;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.CircularRefTest3Params.UICellContentsBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(91, 57));

            // Type '2' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest3Params.UICellContentsBoxEditText1;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.CircularRefTest3Params.UICellContentsBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(80, 81));

            // Type '=A1' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest3Params.UICellContentsBoxEditText2;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(76, 53));

            // Type '=A3' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest3Params.UICellContentsBoxEditText3;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(65, 78));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(65, 37));

            // Click 'cellContentsBox' window
            Mouse.Click(uICellContentsBoxWindow, new Point(39, 19));

            // Type '=a2' in 'cellContentsBox' text box
            uICellContentsBoxEdit.Text = this.CircularRefTest3Params.UICellContentsBoxEditText4;

            // Type '{Enter}' in 'cellContentsBox' text box
            Keyboard.SendKeys(uICellContentsBoxEdit, this.CircularRefTest3Params.UICellContentsBoxEditSendKeys2, ModifierKeys.None);
        }
        
        /// <summary>
        /// CircularRefTest3_Assertion1 - Use 'CircularRefTest3_Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CircularRefTest3_Assertion1()
        {
            #region Variable Declarations
            WinTitleBar uICircularReferenceErrTitleBar = this.UICircularReferenceErrWindow.UICircularReferenceErrTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Circular Reference Error' title bar equals 'Circular Reference Error'
            Assert.AreEqual(this.CircularRefTest3_Assertion1ExpectedValues.UICircularReferenceErrTitleBarDisplayText, uICircularReferenceErrTitleBar.DisplayText, "Should be Circular Reference Error");
        }
        
        #region Properties
        public virtual SimpleFormulaTestParams SimpleFormulaTestParams
        {
            get
            {
                if ((this.mSimpleFormulaTestParams == null))
                {
                    this.mSimpleFormulaTestParams = new SimpleFormulaTestParams();
                }
                return this.mSimpleFormulaTestParams;
            }
        }
        
        public virtual SimpleFormulaTest_Assertion1ExpectedValues SimpleFormulaTest_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mSimpleFormulaTest_Assertion1ExpectedValues == null))
                {
                    this.mSimpleFormulaTest_Assertion1ExpectedValues = new SimpleFormulaTest_Assertion1ExpectedValues();
                }
                return this.mSimpleFormulaTest_Assertion1ExpectedValues;
            }
        }
        
        public virtual FormulaErrorTest1Params FormulaErrorTest1Params
        {
            get
            {
                if ((this.mFormulaErrorTest1Params == null))
                {
                    this.mFormulaErrorTest1Params = new FormulaErrorTest1Params();
                }
                return this.mFormulaErrorTest1Params;
            }
        }
        
        public virtual FormulaErrorTest1_Assertion1ExpectedValues FormulaErrorTest1_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mFormulaErrorTest1_Assertion1ExpectedValues == null))
                {
                    this.mFormulaErrorTest1_Assertion1ExpectedValues = new FormulaErrorTest1_Assertion1ExpectedValues();
                }
                return this.mFormulaErrorTest1_Assertion1ExpectedValues;
            }
        }
        
        public virtual FormulaErrorTest2Params FormulaErrorTest2Params
        {
            get
            {
                if ((this.mFormulaErrorTest2Params == null))
                {
                    this.mFormulaErrorTest2Params = new FormulaErrorTest2Params();
                }
                return this.mFormulaErrorTest2Params;
            }
        }
        
        public virtual FormulaErrorTest2_Assertion1ExpectedValues FormulaErrorTest2_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mFormulaErrorTest2_Assertion1ExpectedValues == null))
                {
                    this.mFormulaErrorTest2_Assertion1ExpectedValues = new FormulaErrorTest2_Assertion1ExpectedValues();
                }
                return this.mFormulaErrorTest2_Assertion1ExpectedValues;
            }
        }
        
        public virtual InvalidFormulaTest1Params InvalidFormulaTest1Params
        {
            get
            {
                if ((this.mInvalidFormulaTest1Params == null))
                {
                    this.mInvalidFormulaTest1Params = new InvalidFormulaTest1Params();
                }
                return this.mInvalidFormulaTest1Params;
            }
        }
        
        public virtual InvalidFormulaTest1_Assertion1ExpectedValues InvalidFormulaTest1_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mInvalidFormulaTest1_Assertion1ExpectedValues == null))
                {
                    this.mInvalidFormulaTest1_Assertion1ExpectedValues = new InvalidFormulaTest1_Assertion1ExpectedValues();
                }
                return this.mInvalidFormulaTest1_Assertion1ExpectedValues;
            }
        }
        
        public virtual SimpleFormulaTest2Params SimpleFormulaTest2Params
        {
            get
            {
                if ((this.mSimpleFormulaTest2Params == null))
                {
                    this.mSimpleFormulaTest2Params = new SimpleFormulaTest2Params();
                }
                return this.mSimpleFormulaTest2Params;
            }
        }
        
        public virtual SimpleFormulaTest2_Assertion1ExpectedValues SimpleFormulaTest2_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mSimpleFormulaTest2_Assertion1ExpectedValues == null))
                {
                    this.mSimpleFormulaTest2_Assertion1ExpectedValues = new SimpleFormulaTest2_Assertion1ExpectedValues();
                }
                return this.mSimpleFormulaTest2_Assertion1ExpectedValues;
            }
        }
        
        public virtual RetryFormulaErrorTest1Params RetryFormulaErrorTest1Params
        {
            get
            {
                if ((this.mRetryFormulaErrorTest1Params == null))
                {
                    this.mRetryFormulaErrorTest1Params = new RetryFormulaErrorTest1Params();
                }
                return this.mRetryFormulaErrorTest1Params;
            }
        }
        
        public virtual RetryFormulaErrorTest1_Assertion1ExpectedValues RetryFormulaErrorTest1_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mRetryFormulaErrorTest1_Assertion1ExpectedValues == null))
                {
                    this.mRetryFormulaErrorTest1_Assertion1ExpectedValues = new RetryFormulaErrorTest1_Assertion1ExpectedValues();
                }
                return this.mRetryFormulaErrorTest1_Assertion1ExpectedValues;
            }
        }
        
        public virtual HelpTest1Params HelpTest1Params
        {
            get
            {
                if ((this.mHelpTest1Params == null))
                {
                    this.mHelpTest1Params = new HelpTest1Params();
                }
                return this.mHelpTest1Params;
            }
        }
        
        public virtual HelpTest2Params HelpTest2Params
        {
            get
            {
                if ((this.mHelpTest2Params == null))
                {
                    this.mHelpTest2Params = new HelpTest2Params();
                }
                return this.mHelpTest2Params;
            }
        }
        
        public virtual HelpTest2_Assertion1ExpectedValues HelpTest2_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mHelpTest2_Assertion1ExpectedValues == null))
                {
                    this.mHelpTest2_Assertion1ExpectedValues = new HelpTest2_Assertion1ExpectedValues();
                }
                return this.mHelpTest2_Assertion1ExpectedValues;
            }
        }
        
        public virtual NewTest1Params NewTest1Params
        {
            get
            {
                if ((this.mNewTest1Params == null))
                {
                    this.mNewTest1Params = new NewTest1Params();
                }
                return this.mNewTest1Params;
            }
        }
        
        public virtual NewTest1_Assertion1ExpectedValues NewTest1_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mNewTest1_Assertion1ExpectedValues == null))
                {
                    this.mNewTest1_Assertion1ExpectedValues = new NewTest1_Assertion1ExpectedValues();
                }
                return this.mNewTest1_Assertion1ExpectedValues;
            }
        }
        
        public virtual OpenTest1Params OpenTest1Params
        {
            get
            {
                if ((this.mOpenTest1Params == null))
                {
                    this.mOpenTest1Params = new OpenTest1Params();
                }
                return this.mOpenTest1Params;
            }
        }
        
        public virtual OpenTest1_Assertion1ExpectedValues OpenTest1_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mOpenTest1_Assertion1ExpectedValues == null))
                {
                    this.mOpenTest1_Assertion1ExpectedValues = new OpenTest1_Assertion1ExpectedValues();
                }
                return this.mOpenTest1_Assertion1ExpectedValues;
            }
        }
        
        public virtual ChangedTest1Params ChangedTest1Params
        {
            get
            {
                if ((this.mChangedTest1Params == null))
                {
                    this.mChangedTest1Params = new ChangedTest1Params();
                }
                return this.mChangedTest1Params;
            }
        }
        
        public virtual ChangedTest1_Assertion1ExpectedValues ChangedTest1_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mChangedTest1_Assertion1ExpectedValues == null))
                {
                    this.mChangedTest1_Assertion1ExpectedValues = new ChangedTest1_Assertion1ExpectedValues();
                }
                return this.mChangedTest1_Assertion1ExpectedValues;
            }
        }
        
        public virtual ChangedTest2Params ChangedTest2Params
        {
            get
            {
                if ((this.mChangedTest2Params == null))
                {
                    this.mChangedTest2Params = new ChangedTest2Params();
                }
                return this.mChangedTest2Params;
            }
        }
        
        public virtual ChangedTest2_Assertion1ExpectedValues ChangedTest2_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mChangedTest2_Assertion1ExpectedValues == null))
                {
                    this.mChangedTest2_Assertion1ExpectedValues = new ChangedTest2_Assertion1ExpectedValues();
                }
                return this.mChangedTest2_Assertion1ExpectedValues;
            }
        }
        
        public virtual SaveTestOverwriteParams SaveTestOverwriteParams
        {
            get
            {
                if ((this.mSaveTestOverwriteParams == null))
                {
                    this.mSaveTestOverwriteParams = new SaveTestOverwriteParams();
                }
                return this.mSaveTestOverwriteParams;
            }
        }
        
        public virtual SaveTestOverwrite_Assertion1ExpectedValues SaveTestOverwrite_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mSaveTestOverwrite_Assertion1ExpectedValues == null))
                {
                    this.mSaveTestOverwrite_Assertion1ExpectedValues = new SaveTestOverwrite_Assertion1ExpectedValues();
                }
                return this.mSaveTestOverwrite_Assertion1ExpectedValues;
            }
        }
        
        public virtual CircularRefTest1Params CircularRefTest1Params
        {
            get
            {
                if ((this.mCircularRefTest1Params == null))
                {
                    this.mCircularRefTest1Params = new CircularRefTest1Params();
                }
                return this.mCircularRefTest1Params;
            }
        }
        
        public virtual CircularRefTest1_Assertion1ExpectedValues CircularRefTest1_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mCircularRefTest1_Assertion1ExpectedValues == null))
                {
                    this.mCircularRefTest1_Assertion1ExpectedValues = new CircularRefTest1_Assertion1ExpectedValues();
                }
                return this.mCircularRefTest1_Assertion1ExpectedValues;
            }
        }
        
        public virtual NewTest2Params NewTest2Params
        {
            get
            {
                if ((this.mNewTest2Params == null))
                {
                    this.mNewTest2Params = new NewTest2Params();
                }
                return this.mNewTest2Params;
            }
        }
        
        public virtual NewTest2_Assertion1ExpectedValues NewTest2_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mNewTest2_Assertion1ExpectedValues == null))
                {
                    this.mNewTest2_Assertion1ExpectedValues = new NewTest2_Assertion1ExpectedValues();
                }
                return this.mNewTest2_Assertion1ExpectedValues;
            }
        }
        
        public virtual SaveAndOpenTest1Params SaveAndOpenTest1Params
        {
            get
            {
                if ((this.mSaveAndOpenTest1Params == null))
                {
                    this.mSaveAndOpenTest1Params = new SaveAndOpenTest1Params();
                }
                return this.mSaveAndOpenTest1Params;
            }
        }
        
        public virtual SaveAndOpenTest1_Assertion1ExpectedValues SaveAndOpenTest1_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mSaveAndOpenTest1_Assertion1ExpectedValues == null))
                {
                    this.mSaveAndOpenTest1_Assertion1ExpectedValues = new SaveAndOpenTest1_Assertion1ExpectedValues();
                }
                return this.mSaveAndOpenTest1_Assertion1ExpectedValues;
            }
        }
        
        public virtual SaveAndOpenTest2Params SaveAndOpenTest2Params
        {
            get
            {
                if ((this.mSaveAndOpenTest2Params == null))
                {
                    this.mSaveAndOpenTest2Params = new SaveAndOpenTest2Params();
                }
                return this.mSaveAndOpenTest2Params;
            }
        }
        
        public virtual SaveAndOpenTest2_Assertion1ExpectedValues SaveAndOpenTest2_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mSaveAndOpenTest2_Assertion1ExpectedValues == null))
                {
                    this.mSaveAndOpenTest2_Assertion1ExpectedValues = new SaveAndOpenTest2_Assertion1ExpectedValues();
                }
                return this.mSaveAndOpenTest2_Assertion1ExpectedValues;
            }
        }
        
        public virtual CircularRefTest2Params CircularRefTest2Params
        {
            get
            {
                if ((this.mCircularRefTest2Params == null))
                {
                    this.mCircularRefTest2Params = new CircularRefTest2Params();
                }
                return this.mCircularRefTest2Params;
            }
        }
        
        public virtual CircularRefTest2_Assertion1ExpectedValues CircularRefTest2_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mCircularRefTest2_Assertion1ExpectedValues == null))
                {
                    this.mCircularRefTest2_Assertion1ExpectedValues = new CircularRefTest2_Assertion1ExpectedValues();
                }
                return this.mCircularRefTest2_Assertion1ExpectedValues;
            }
        }
        
        public virtual CloseTest1Params CloseTest1Params
        {
            get
            {
                if ((this.mCloseTest1Params == null))
                {
                    this.mCloseTest1Params = new CloseTest1Params();
                }
                return this.mCloseTest1Params;
            }
        }
        
        public virtual CloseHelpTestParams CloseHelpTestParams
        {
            get
            {
                if ((this.mCloseHelpTestParams == null))
                {
                    this.mCloseHelpTestParams = new CloseHelpTestParams();
                }
                return this.mCloseHelpTestParams;
            }
        }
        
        public virtual CloseTest2Params CloseTest2Params
        {
            get
            {
                if ((this.mCloseTest2Params == null))
                {
                    this.mCloseTest2Params = new CloseTest2Params();
                }
                return this.mCloseTest2Params;
            }
        }
        
        public virtual OpenTest2Params OpenTest2Params
        {
            get
            {
                if ((this.mOpenTest2Params == null))
                {
                    this.mOpenTest2Params = new OpenTest2Params();
                }
                return this.mOpenTest2Params;
            }
        }
        
        public virtual OpenTest3Params OpenTest3Params
        {
            get
            {
                if ((this.mOpenTest3Params == null))
                {
                    this.mOpenTest3Params = new OpenTest3Params();
                }
                return this.mOpenTest3Params;
            }
        }
        
        public virtual OpenTest3_Assertion1ExpectedValues OpenTest3_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mOpenTest3_Assertion1ExpectedValues == null))
                {
                    this.mOpenTest3_Assertion1ExpectedValues = new OpenTest3_Assertion1ExpectedValues();
                }
                return this.mOpenTest3_Assertion1ExpectedValues;
            }
        }
        
        public virtual ReadFileErrorTest1Params ReadFileErrorTest1Params
        {
            get
            {
                if ((this.mReadFileErrorTest1Params == null))
                {
                    this.mReadFileErrorTest1Params = new ReadFileErrorTest1Params();
                }
                return this.mReadFileErrorTest1Params;
            }
        }
        
        public virtual ReadFileErrorTest2Params ReadFileErrorTest2Params
        {
            get
            {
                if ((this.mReadFileErrorTest2Params == null))
                {
                    this.mReadFileErrorTest2Params = new ReadFileErrorTest2Params();
                }
                return this.mReadFileErrorTest2Params;
            }
        }
        
        public virtual ReadFileErrorTest2_Assertion1ExpectedValues ReadFileErrorTest2_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mReadFileErrorTest2_Assertion1ExpectedValues == null))
                {
                    this.mReadFileErrorTest2_Assertion1ExpectedValues = new ReadFileErrorTest2_Assertion1ExpectedValues();
                }
                return this.mReadFileErrorTest2_Assertion1ExpectedValues;
            }
        }
        
        public virtual CircularRefTest3Params CircularRefTest3Params
        {
            get
            {
                if ((this.mCircularRefTest3Params == null))
                {
                    this.mCircularRefTest3Params = new CircularRefTest3Params();
                }
                return this.mCircularRefTest3Params;
            }
        }
        
        public virtual CircularRefTest3_Assertion1ExpectedValues CircularRefTest3_Assertion1ExpectedValues
        {
            get
            {
                if ((this.mCircularRefTest3_Assertion1ExpectedValues == null))
                {
                    this.mCircularRefTest3_Assertion1ExpectedValues = new CircularRefTest3_Assertion1ExpectedValues();
                }
                return this.mCircularRefTest3_Assertion1ExpectedValues;
            }
        }
        
        public UISpreadsheet1Window UISpreadsheet1Window
        {
            get
            {
                if ((this.mUISpreadsheet1Window == null))
                {
                    this.mUISpreadsheet1Window = new UISpreadsheet1Window();
                }
                return this.mUISpreadsheet1Window;
            }
        }
        
        public UISaveBeforeExitingWindow UISaveBeforeExitingWindow
        {
            get
            {
                if ((this.mUISaveBeforeExitingWindow == null))
                {
                    this.mUISaveBeforeExitingWindow = new UISaveBeforeExitingWindow();
                }
                return this.mUISaveBeforeExitingWindow;
            }
        }
        
        public UIFormulaFormatErrorWindow UIFormulaFormatErrorWindow
        {
            get
            {
                if ((this.mUIFormulaFormatErrorWindow == null))
                {
                    this.mUIFormulaFormatErrorWindow = new UIFormulaFormatErrorWindow();
                }
                return this.mUIFormulaFormatErrorWindow;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        
        public UISpreadsheet2Window UISpreadsheet2Window
        {
            get
            {
                if ((this.mUISpreadsheet2Window == null))
                {
                    this.mUISpreadsheet2Window = new UISpreadsheet2Window();
                }
                return this.mUISpreadsheet2Window;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UICUsersBasilDocumentsWindow UICUsersBasilDocumentsWindow
        {
            get
            {
                if ((this.mUICUsersBasilDocumentsWindow == null))
                {
                    this.mUICUsersBasilDocumentsWindow = new UICUsersBasilDocumentsWindow();
                }
                return this.mUICUsersBasilDocumentsWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow();
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }
        
        public UICircularReferenceErrWindow UICircularReferenceErrWindow
        {
            get
            {
                if ((this.mUICircularReferenceErrWindow == null))
                {
                    this.mUICircularReferenceErrWindow = new UICircularReferenceErrWindow();
                }
                return this.mUICircularReferenceErrWindow;
            }
        }
        
        public UISpreadsheet3Window UISpreadsheet3Window
        {
            get
            {
                if ((this.mUISpreadsheet3Window == null))
                {
                    this.mUISpreadsheet3Window = new UISpreadsheet3Window();
                }
                return this.mUISpreadsheet3Window;
            }
        }
        
        public UICUsersBasilDocumentsWindow1 UICUsersBasilDocumentsWindow1
        {
            get
            {
                if ((this.mUICUsersBasilDocumentsWindow1 == null))
                {
                    this.mUICUsersBasilDocumentsWindow1 = new UICUsersBasilDocumentsWindow1();
                }
                return this.mUICUsersBasilDocumentsWindow1;
            }
        }
        
        public UICUsersBasilDocumentsWindow2 UICUsersBasilDocumentsWindow2
        {
            get
            {
                if ((this.mUICUsersBasilDocumentsWindow2 == null))
                {
                    this.mUICUsersBasilDocumentsWindow2 = new UICUsersBasilDocumentsWindow2();
                }
                return this.mUICUsersBasilDocumentsWindow2;
            }
        }
        
        public UIErrorReadingSpreadshWindow UIErrorReadingSpreadshWindow
        {
            get
            {
                if ((this.mUIErrorReadingSpreadshWindow == null))
                {
                    this.mUIErrorReadingSpreadshWindow = new UIErrorReadingSpreadshWindow();
                }
                return this.mUIErrorReadingSpreadshWindow;
            }
        }
        
        public UICUsersBasilDocumentsWindow3 UICUsersBasilDocumentsWindow3
        {
            get
            {
                if ((this.mUICUsersBasilDocumentsWindow3 == null))
                {
                    this.mUICUsersBasilDocumentsWindow3 = new UICUsersBasilDocumentsWindow3();
                }
                return this.mUICUsersBasilDocumentsWindow3;
            }
        }
        #endregion
        
        #region Fields
        private SimpleFormulaTestParams mSimpleFormulaTestParams;
        
        private SimpleFormulaTest_Assertion1ExpectedValues mSimpleFormulaTest_Assertion1ExpectedValues;
        
        private FormulaErrorTest1Params mFormulaErrorTest1Params;
        
        private FormulaErrorTest1_Assertion1ExpectedValues mFormulaErrorTest1_Assertion1ExpectedValues;
        
        private FormulaErrorTest2Params mFormulaErrorTest2Params;
        
        private FormulaErrorTest2_Assertion1ExpectedValues mFormulaErrorTest2_Assertion1ExpectedValues;
        
        private InvalidFormulaTest1Params mInvalidFormulaTest1Params;
        
        private InvalidFormulaTest1_Assertion1ExpectedValues mInvalidFormulaTest1_Assertion1ExpectedValues;
        
        private SimpleFormulaTest2Params mSimpleFormulaTest2Params;
        
        private SimpleFormulaTest2_Assertion1ExpectedValues mSimpleFormulaTest2_Assertion1ExpectedValues;
        
        private RetryFormulaErrorTest1Params mRetryFormulaErrorTest1Params;
        
        private RetryFormulaErrorTest1_Assertion1ExpectedValues mRetryFormulaErrorTest1_Assertion1ExpectedValues;
        
        private HelpTest1Params mHelpTest1Params;
        
        private HelpTest2Params mHelpTest2Params;
        
        private HelpTest2_Assertion1ExpectedValues mHelpTest2_Assertion1ExpectedValues;
        
        private NewTest1Params mNewTest1Params;
        
        private NewTest1_Assertion1ExpectedValues mNewTest1_Assertion1ExpectedValues;
        
        private OpenTest1Params mOpenTest1Params;
        
        private OpenTest1_Assertion1ExpectedValues mOpenTest1_Assertion1ExpectedValues;
        
        private ChangedTest1Params mChangedTest1Params;
        
        private ChangedTest1_Assertion1ExpectedValues mChangedTest1_Assertion1ExpectedValues;
        
        private ChangedTest2Params mChangedTest2Params;
        
        private ChangedTest2_Assertion1ExpectedValues mChangedTest2_Assertion1ExpectedValues;
        
        private SaveTestOverwriteParams mSaveTestOverwriteParams;
        
        private SaveTestOverwrite_Assertion1ExpectedValues mSaveTestOverwrite_Assertion1ExpectedValues;
        
        private CircularRefTest1Params mCircularRefTest1Params;
        
        private CircularRefTest1_Assertion1ExpectedValues mCircularRefTest1_Assertion1ExpectedValues;
        
        private NewTest2Params mNewTest2Params;
        
        private NewTest2_Assertion1ExpectedValues mNewTest2_Assertion1ExpectedValues;
        
        private SaveAndOpenTest1Params mSaveAndOpenTest1Params;
        
        private SaveAndOpenTest1_Assertion1ExpectedValues mSaveAndOpenTest1_Assertion1ExpectedValues;
        
        private SaveAndOpenTest2Params mSaveAndOpenTest2Params;
        
        private SaveAndOpenTest2_Assertion1ExpectedValues mSaveAndOpenTest2_Assertion1ExpectedValues;
        
        private CircularRefTest2Params mCircularRefTest2Params;
        
        private CircularRefTest2_Assertion1ExpectedValues mCircularRefTest2_Assertion1ExpectedValues;
        
        private CloseTest1Params mCloseTest1Params;
        
        private CloseHelpTestParams mCloseHelpTestParams;
        
        private CloseTest2Params mCloseTest2Params;
        
        private OpenTest2Params mOpenTest2Params;
        
        private OpenTest3Params mOpenTest3Params;
        
        private OpenTest3_Assertion1ExpectedValues mOpenTest3_Assertion1ExpectedValues;
        
        private ReadFileErrorTest1Params mReadFileErrorTest1Params;
        
        private ReadFileErrorTest2Params mReadFileErrorTest2Params;
        
        private ReadFileErrorTest2_Assertion1ExpectedValues mReadFileErrorTest2_Assertion1ExpectedValues;
        
        private CircularRefTest3Params mCircularRefTest3Params;
        
        private CircularRefTest3_Assertion1ExpectedValues mCircularRefTest3_Assertion1ExpectedValues;
        
        private UISpreadsheet1Window mUISpreadsheet1Window;
        
        private UISaveBeforeExitingWindow mUISaveBeforeExitingWindow;
        
        private UIFormulaFormatErrorWindow mUIFormulaFormatErrorWindow;
        
        private UIHelpWindow mUIHelpWindow;
        
        private UISpreadsheet2Window mUISpreadsheet2Window;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UICUsersBasilDocumentsWindow mUICUsersBasilDocumentsWindow;
        
        private UISaveWindow mUISaveWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIWarningWindow mUIWarningWindow;
        
        private UICircularReferenceErrWindow mUICircularReferenceErrWindow;
        
        private UISpreadsheet3Window mUISpreadsheet3Window;
        
        private UICUsersBasilDocumentsWindow1 mUICUsersBasilDocumentsWindow1;
        
        private UICUsersBasilDocumentsWindow2 mUICUsersBasilDocumentsWindow2;
        
        private UIErrorReadingSpreadshWindow mUIErrorReadingSpreadshWindow;
        
        private UICUsersBasilDocumentsWindow3 mUICUsersBasilDocumentsWindow3;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SimpleFormulaTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SimpleFormulaTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=1+1' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "=1+1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SimpleFormulaTest_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SimpleFormulaTest_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueBox' text box equals '2'
        /// </summary>
        public string UICellValueBoxEditText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals '=1+1'
        /// </summary>
        public string UICellContentsBoxEditText = "=1+1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class FormulaErrorTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=1/0' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "=1/0";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorTest1_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class FormulaErrorTest1_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueBox' text box equals 'Error: Divide by Zero'
        /// </summary>
        public string UICellValueBoxEditText = "Error: Divide by Zero";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class FormulaErrorTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=B2' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "=B2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormulaErrorTest2_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class FormulaErrorTest2_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueBox' text box equals 'Error: Your Variable is Undefined'
        /// </summary>
        public string UICellValueBoxEditText = "Error: Your Variable is Undefined";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals '=B2'
        /// </summary>
        public string UICellContentsBoxEditText = "=B2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InvalidFormulaTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class InvalidFormulaTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=z100' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "=z100";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=kshjdfs' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText1 = "=kshjdfs";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InvalidFormulaTest1_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class InvalidFormulaTest1_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals ''
        /// </summary>
        public string UICellContentsBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueBox' text box equals ''
        /// </summary>
        public string UICellValueBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SimpleFormulaTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SimpleFormulaTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '2' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText1 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '1' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText3 = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '5' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText4 = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+A2-A3*A4/A5' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText5 = "=A1+A2-A3*A4/A5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SimpleFormulaTest2_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SimpleFormulaTest2_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellNameBox' text box equals 'A6'
        /// </summary>
        public string UICellNameBoxEditText = "A6";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueBox' text box equals '5.4'
        /// </summary>
        public string UICellValueBoxEditText = "5.4";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals '=A1+A2-A3*A4/A5'
        /// </summary>
        public string UICellContentsBoxEditText = "=A1+A2-A3*A4/A5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RetryFormulaErrorTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RetryFormulaErrorTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=B1' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "=B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RetryFormulaErrorTest1_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class RetryFormulaErrorTest1_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueBox' text box equals 'Error: Your Variable is Undefined'
        /// </summary>
        public string UICellValueBoxEditText = "Error: Your Variable is Undefined";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals '=B1'
        /// </summary>
        public string UICellContentsBoxEditText = "=B1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HelpTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class HelpTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HelpTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class HelpTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HelpTest2_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class HelpTest2_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Help' title bar equals 'Help'
        /// </summary>
        public string UIHelpTitleBarDisplayText = "Help";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NewTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class NewTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NewTest1_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class NewTest1_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Spreadsheet2' title bar equals 'Spreadsheet2'
        /// </summary>
        public string UISpreadsheet2TitleBarDisplayText = "Spreadsheet2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenTest1_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenTest1_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals 'hello world'
        /// </summary>
        public string UICellContentsBoxEditText = "hello world";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellValueBox' text box equals 'hello world'
        /// </summary>
        public string UICellValueBoxEditText = "hello world";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangedTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ChangedTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'hello mom' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "hello mom";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangedTest1_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ChangedTest1_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Unsaved Changes Exist' label equals 'Unsaved Changes Exist'
        /// </summary>
        public string UIUnsavedChangesExistTextName = "Unsaved Changes Exist";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangedTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ChangedTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'hello TA' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "hello TA";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangedTest2_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ChangedTest2_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Save Before Exiting?' title bar equals 'Save Before Exiting?'
        /// </summary>
        public string UISaveBeforeExitingTitleBarDisplayText = "Save Before Exiting?";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveTestOverwrite'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveTestOverwriteParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'HELLO' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "HELLO";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveTestOverwrite_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveTestOverwrite_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Warning' title bar equals 'Warning'
        /// </summary>
        public string UIWarningTitleBarDisplayText = "Warning";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularRefTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CircularRefTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '1' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText1 = "=A1";
        
        /// <summary>
        /// Type '=b1' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText2 = "=b1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularRefTest1_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CircularRefTest1_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals '1'
        /// </summary>
        public string UICellContentsBoxEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NewTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class NewTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NewTest2_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class NewTest2_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Spreadsheet3' title bar equals 'Spreadsheet3'
        /// </summary>
        public string UISpreadsheet3TitleBarDisplayText = "Spreadsheet3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAndOpenTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveAndOpenTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'save and open test' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "save and open test";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'saveandopentest' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "saveandopentest";
        
        /// <summary>
        /// Type 'make a new file' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText1 = "make a new file";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAndOpenTest1_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveAndOpenTest1_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals 'save and open test'
        /// </summary>
        public string UICellContentsBoxEditText = "save and open test";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'C:\Users\Basil\Documents\Visual Studio 2013\Projec...' title bar equals 'C:\Users\Basil\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\saveandopentest.sprd'
        /// </summary>
        public string UICUsersBasilDocumentsTitleBarDisplayText = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\saveandopentest.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAndOpenTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveAndOpenTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'change' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "change";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'change' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "change";
        
        /// <summary>
        /// Type 'another change' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText1 = "another change";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAndOpenTest2_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveAndOpenTest2_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals 'change'
        /// </summary>
        public string UICellContentsBoxEditText = "change";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'C:\Users\Basil\Documents\Visual Studio 2013\Projec...' title bar equals 'C:\Users\Basil\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\change.sprd'
        /// </summary>
        public string UICUsersBasilDocumentsTitleBarDisplayText = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\change.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularRefTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CircularRefTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '2' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "2";
        
        /// <summary>
        /// Type '2' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText3 = "=A1";
        
        /// <summary>
        /// Type '=A3' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText4 = "=A3";
        
        /// <summary>
        /// Type '=a2' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText5 = "=a2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularRefTest2_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CircularRefTest2_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals '2'
        /// </summary>
        public string UICellContentsBoxEditText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CloseTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CloseTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'asgfsd' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "asgfsd";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'something' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "something";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CloseHelpTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CloseHelpTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'help' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "help";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'help' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "help";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CloseTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CloseTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'sds' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "sds";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'savethis' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "savethis";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'open' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "open";
        
        /// <summary>
        /// Type 'bla' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText1 = "bla";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenTest3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenTest3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'savethis' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "savethis";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'savethisspreadsheet' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "savethisspreadsheet";
        
        /// <summary>
        /// Type '42' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText1 = "42";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenTest3_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenTest3_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellContentsBox' text box equals 'savethis'
        /// </summary>
        public string UICellContentsBoxEditText = "savethis";
        
        /// <summary>
        /// Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ReadFileErrorTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ReadFileErrorTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Select 'All Files (*.*)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "All Files (*.*)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ReadFileErrorTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ReadFileErrorTest2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Select 'All Files (*.*)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "All Files (*.*)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ReadFileErrorTest2_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ReadFileErrorTest2_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellNameBox' text box equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularRefTest3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CircularRefTest3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '1' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText2 = "=A1";
        
        /// <summary>
        /// Type '=A3' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText3 = "=A3";
        
        /// <summary>
        /// Type '=a2' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditText4 = "=a2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContentsBox' text box
        /// </summary>
        public string UICellContentsBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularRefTest3_Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class CircularRefTest3_Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Circular Reference Error' title bar equals 'Circular Reference Error'
        /// </summary>
        public string UICircularReferenceErrTitleBarDisplayText = "Circular Reference Error";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet1Window : WinWindow
    {
        
        public UISpreadsheet1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public UICellContentsBoxWindow UICellContentsBoxWindow
        {
            get
            {
                if ((this.mUICellContentsBoxWindow == null))
                {
                    this.mUICellContentsBoxWindow = new UICellContentsBoxWindow(this);
                }
                return this.mUICellContentsBoxWindow;
            }
        }
        
        public UICellValueBoxWindow UICellValueBoxWindow
        {
            get
            {
                if ((this.mUICellValueBoxWindow == null))
                {
                    this.mUICellValueBoxWindow = new UICellValueBoxWindow(this);
                }
                return this.mUICellValueBoxWindow;
            }
        }
        
        public UISpreadsheet1TitleBar UISpreadsheet1TitleBar
        {
            get
            {
                if ((this.mUISpreadsheet1TitleBar == null))
                {
                    this.mUISpreadsheet1TitleBar = new UISpreadsheet1TitleBar(this);
                }
                return this.mUISpreadsheet1TitleBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIEvaluateWindow UIEvaluateWindow
        {
            get
            {
                if ((this.mUIEvaluateWindow == null))
                {
                    this.mUIEvaluateWindow = new UIEvaluateWindow(this);
                }
                return this.mUIEvaluateWindow;
            }
        }
        
        public UIStatusStrip1StatusBar UIStatusStrip1StatusBar
        {
            get
            {
                if ((this.mUIStatusStrip1StatusBar == null))
                {
                    this.mUIStatusStrip1StatusBar = new UIStatusStrip1StatusBar(this);
                }
                return this.mUIStatusStrip1StatusBar;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public UISpreadsheet1Client UISpreadsheet1Client
        {
            get
            {
                if ((this.mUISpreadsheet1Client == null))
                {
                    this.mUISpreadsheet1Client = new UISpreadsheet1Client(this);
                }
                return this.mUISpreadsheet1Client;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsBoxWindow mUICellContentsBoxWindow;
        
        private UICellValueBoxWindow mUICellValueBoxWindow;
        
        private UISpreadsheet1TitleBar mUISpreadsheet1TitleBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UIA1Window mUIA1Window;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIEvaluateWindow mUIEvaluateWindow;
        
        private UIStatusStrip1StatusBar mUIStatusStrip1StatusBar;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        
        private UISpreadsheet1Client mUISpreadsheet1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellContentsBoxWindow : WinWindow
    {
        
        public UICellContentsBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsBox";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsBoxEdit
        {
            get
            {
                if ((this.mUICellContentsBoxEdit == null))
                {
                    this.mUICellContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "F(x)";
                    this.mUICellContentsBoxEdit.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUICellContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellValueBoxWindow : WinWindow
    {
        
        public UICellValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueBox";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueBoxEdit
        {
            get
            {
                if ((this.mUICellValueBoxEdit == null))
                {
                    this.mUICellValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueBoxEdit.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUICellValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet1TitleBar : WinTitleBar
    {
        
        public UISpreadsheet1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellNameBox";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameBoxEdit
        {
            get
            {
                if ((this.mUICellNameBoxEdit == null))
                {
                    this.mUICellNameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameBoxEdit.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUICellNameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIHelpMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIEvaluateWindow : WinWindow
    {
        
        public UIEvaluateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "evaluateButton";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinButton UIEvaluateButton
        {
            get
            {
                if ((this.mUIEvaluateButton == null))
                {
                    this.mUIEvaluateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEvaluateButton.SearchProperties[WinButton.PropertyNames.Name] = "Evaluate";
                    this.mUIEvaluateButton.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUIEvaluateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEvaluateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIStatusStrip1StatusBar : WinStatusBar
    {
        
        public UIStatusStrip1StatusBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinStatusBar.PropertyNames.Name] = "statusStrip1";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinText UIUnsavedChangesExistText
        {
            get
            {
                if ((this.mUIUnsavedChangesExistText == null))
                {
                    this.mUIUnsavedChangesExistText = new WinText(this);
                    #region Search Criteria
                    this.mUIUnsavedChangesExistText.SearchProperties[WinText.PropertyNames.Name] = "Unsaved Changes Exist";
                    this.mUIUnsavedChangesExistText.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUIUnsavedChangesExistText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIUnsavedChangesExistText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet1Client : WinClient
    {
        
        public UISpreadsheet1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Spreadsheet1";
            this.WindowTitles.Add("Spreadsheet1");
            #endregion
        }
        
        #region Properties
        public WinWindow UICellContentsBoxWindow
        {
            get
            {
                if ((this.mUICellContentsBoxWindow == null))
                {
                    this.mUICellContentsBoxWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICellContentsBoxWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "F(x)";
                    this.mUICellContentsBoxWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUICellContentsBoxWindow.WindowTitles.Add("Spreadsheet1");
                    #endregion
                }
                return this.mUICellContentsBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUICellContentsBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveBeforeExitingWindow : WinWindow
    {
        
        public UISaveBeforeExitingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Before Exiting?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save Before Exiting?");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public WinTitleBar UISaveBeforeExitingTitleBar
        {
            get
            {
                if ((this.mUISaveBeforeExitingTitleBar == null))
                {
                    this.mUISaveBeforeExitingTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISaveBeforeExitingTitleBar.WindowTitles.Add("Save Before Exiting?");
                    #endregion
                }
                return this.mUISaveBeforeExitingTitleBar;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private WinTitleBar mUISaveBeforeExitingTitleBar;
        
        private UICancelWindow mUICancelWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Save Before Exiting?");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Save Before Exiting?");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save Before Exiting?");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save Before Exiting?");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Save Before Exiting?");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Save Before Exiting?");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFormulaFormatErrorWindow : WinWindow
    {
        
        public UIFormulaFormatErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Formula Format Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Formula Format Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Formula Format Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Formula Format Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpWindow : WinWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIHelpTitleBar
        {
            get
            {
                if ((this.mUIHelpTitleBar == null))
                {
                    this.mUIHelpTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIHelpTitleBar.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUIHelpTitleBar;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIHelpTitleBar;
        
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet2Window : WinWindow
    {
        
        public UISpreadsheet2Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet2");
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\open.sprd");
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\savethisspreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public UISpreadsheet2TitleBar UISpreadsheet2TitleBar
        {
            get
            {
                if ((this.mUISpreadsheet2TitleBar == null))
                {
                    this.mUISpreadsheet2TitleBar = new UISpreadsheet2TitleBar(this);
                }
                return this.mUISpreadsheet2TitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UICellContentsBoxWindow1 UICellContentsBoxWindow
        {
            get
            {
                if ((this.mUICellContentsBoxWindow == null))
                {
                    this.mUICellContentsBoxWindow = new UICellContentsBoxWindow1(this);
                }
                return this.mUICellContentsBoxWindow;
            }
        }
        
        public UIMenuStrip1Window1 UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window1(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public UISpreadsheet2Client UISpreadsheet2Client
        {
            get
            {
                if ((this.mUISpreadsheet2Client == null))
                {
                    this.mUISpreadsheet2Client = new UISpreadsheet2Client(this);
                }
                return this.mUISpreadsheet2Client;
            }
        }
        
        public UIA1Window1 UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window1(this);
                }
                return this.mUIA1Window;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheet2TitleBar mUISpreadsheet2TitleBar;
        
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UICellContentsBoxWindow1 mUICellContentsBoxWindow;
        
        private UIMenuStrip1Window1 mUIMenuStrip1Window;
        
        private UISpreadsheet2Client mUISpreadsheet2Client;
        
        private UIA1Window1 mUIA1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet2TitleBar : WinTitleBar
    {
        
        public UISpreadsheet2TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet2");
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\open.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                            "\\open.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet2");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet2");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet2");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet2");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet2");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellContentsBoxWindow1 : WinWindow
    {
        
        public UICellContentsBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsBox";
            this.WindowTitles.Add("Spreadsheet2");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsBoxEdit
        {
            get
            {
                if ((this.mUICellContentsBoxEdit == null))
                {
                    this.mUICellContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "F(x)";
                    this.mUICellContentsBoxEdit.WindowTitles.Add("Spreadsheet2");
                    #endregion
                }
                return this.mUICellContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1Window1 : WinWindow
    {
        
        public UIMenuStrip1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet2");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("Spreadsheet2");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet2Client : WinClient
    {
        
        public UISpreadsheet2Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Spreadsheet2";
            this.WindowTitles.Add("Spreadsheet2");
            #endregion
        }
        
        #region Properties
        public WinWindow UICellContentsBoxWindow
        {
            get
            {
                if ((this.mUICellContentsBoxWindow == null))
                {
                    this.mUICellContentsBoxWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUICellContentsBoxWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "F(x)";
                    this.mUICellContentsBoxWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUICellContentsBoxWindow.WindowTitles.Add("Spreadsheet2");
                    #endregion
                }
                return this.mUICellContentsBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUICellContentsBoxWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window1 : WinWindow
    {
        
        public UIA1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellNameBox";
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\savethisspreadsheet.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameBoxEdit
        {
            get
            {
                if ((this.mUICellNameBoxEdit == null))
                {
                    this.mUICellNameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameBoxEdit.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                            "\\savethisspreadsheet.sprd");
                    #endregion
                }
                return this.mUICellNameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UICancelWindow1 mUICancelWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITestsprdListItem UITestsprdListItem
        {
            get
            {
                if ((this.mUITestsprdListItem == null))
                {
                    this.mUITestsprdListItem = new UITestsprdListItem(this);
                }
                return this.mUITestsprdListItem;
            }
        }
        
        public UISaveandopentestsprdListItem UISaveandopentestsprdListItem
        {
            get
            {
                if ((this.mUISaveandopentestsprdListItem == null))
                {
                    this.mUISaveandopentestsprdListItem = new UISaveandopentestsprdListItem(this);
                }
                return this.mUISaveandopentestsprdListItem;
            }
        }
        
        public UIChangesprdListItem UIChangesprdListItem
        {
            get
            {
                if ((this.mUIChangesprdListItem == null))
                {
                    this.mUIChangesprdListItem = new UIChangesprdListItem(this);
                }
                return this.mUIChangesprdListItem;
            }
        }
        
        public UIOpensprdListItem UIOpensprdListItem
        {
            get
            {
                if ((this.mUIOpensprdListItem == null))
                {
                    this.mUIOpensprdListItem = new UIOpensprdListItem(this);
                }
                return this.mUIOpensprdListItem;
            }
        }
        
        public UISavethisspreadsheetsListItem UISavethisspreadsheetsListItem
        {
            get
            {
                if ((this.mUISavethisspreadsheetsListItem == null))
                {
                    this.mUISavethisspreadsheetsListItem = new UISavethisspreadsheetsListItem(this);
                }
                return this.mUISavethisspreadsheetsListItem;
            }
        }
        
        public UITexttxtListItem UITexttxtListItem
        {
            get
            {
                if ((this.mUITexttxtListItem == null))
                {
                    this.mUITexttxtListItem = new UITexttxtListItem(this);
                }
                return this.mUITexttxtListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestsprdListItem mUITestsprdListItem;
        
        private UISaveandopentestsprdListItem mUISaveandopentestsprdListItem;
        
        private UIChangesprdListItem mUIChangesprdListItem;
        
        private UIOpensprdListItem mUIOpensprdListItem;
        
        private UISavethisspreadsheetsListItem mUISavethisspreadsheetsListItem;
        
        private UITexttxtListItem mUITexttxtListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdListItem : WinListItem
    {
        
        public UITestsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveandopentestsprdListItem : WinListItem
    {
        
        public UISaveandopentestsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "saveandopentest.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIChangesprdListItem : WinListItem
    {
        
        public UIChangesprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "change.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpensprdListItem : WinListItem
    {
        
        public UIOpensprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "open.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISavethisspreadsheetsListItem : WinListItem
    {
        
        public UISavethisspreadsheetsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "savethisspreadsheet.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITexttxtListItem : WinListItem
    {
        
        public UITexttxtListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "text.txt";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1136";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilesoftypeComboBox
        {
            get
            {
                if ((this.mUIFilesoftypeComboBox == null))
                {
                    this.mUIFilesoftypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilesoftypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Files of type:";
                    this.mUIFilesoftypeComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilesoftypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilesoftypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICUsersBasilDocumentsWindow : WinWindow
    {
        
        public UICUsersBasilDocumentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                "\\test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\test.sprd");
            #endregion
        }
        
        #region Properties
        public UICellContentsBoxWindow2 UICellContentsBoxWindow
        {
            get
            {
                if ((this.mUICellContentsBoxWindow == null))
                {
                    this.mUICellContentsBoxWindow = new UICellContentsBoxWindow2(this);
                }
                return this.mUICellContentsBoxWindow;
            }
        }
        
        public UICellValueBoxWindow1 UICellValueBoxWindow
        {
            get
            {
                if ((this.mUICellValueBoxWindow == null))
                {
                    this.mUICellValueBoxWindow = new UICellValueBoxWindow1(this);
                }
                return this.mUICellValueBoxWindow;
            }
        }
        
        public UIA1Window2 UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window2(this);
                }
                return this.mUIA1Window;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsBoxWindow2 mUICellContentsBoxWindow;
        
        private UICellValueBoxWindow1 mUICellValueBoxWindow;
        
        private UIA1Window2 mUIA1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellContentsBoxWindow2 : WinWindow
    {
        
        public UICellContentsBoxWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsBox";
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsBoxEdit
        {
            get
            {
                if ((this.mUICellContentsBoxEdit == null))
                {
                    this.mUICellContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "F(x)";
                    this.mUICellContentsBoxEdit.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                            "\\test.sprd");
                    #endregion
                }
                return this.mUICellContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellValueBoxWindow1 : WinWindow
    {
        
        public UICellValueBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValueBox";
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueBoxEdit
        {
            get
            {
                if ((this.mUICellValueBoxEdit == null))
                {
                    this.mUICellValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueBoxEdit.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                            "\\test.sprd");
                    #endregion
                }
                return this.mUICellValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window2 : WinWindow
    {
        
        public UIA1Window2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellNameBox";
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameBoxEdit
        {
            get
            {
                if ((this.mUICellNameBoxEdit == null))
                {
                    this.mUICellNameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameBoxEdit.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                            "\\test.sprd");
                    #endregion
                }
                return this.mUICellNameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveWindow1 UISaveWindow1
        {
            get
            {
                if ((this.mUISaveWindow1 == null))
                {
                    this.mUISaveWindow1 = new UISaveWindow1(this);
                }
                return this.mUISaveWindow1;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UICancelWindow2 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow2(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UISaveWindow1 mUISaveWindow1;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UICancelWindow2 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UITestsprdListItem1 UITestsprdListItem
        {
            get
            {
                if ((this.mUITestsprdListItem == null))
                {
                    this.mUITestsprdListItem = new UITestsprdListItem1(this);
                }
                return this.mUITestsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestsprdListItem1 mUITestsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdListItem1 : WinListItem
    {
        
        public UITestsprdListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test.sprd";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveWindow1 : WinWindow
    {
        
        public UISaveWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow2 : WinWindow
    {
        
        public UICancelWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIWarningWindow : WinWindow
    {
        
        public UIWarningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIWarningTitleBar
        {
            get
            {
                if ((this.mUIWarningTitleBar == null))
                {
                    this.mUIWarningTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIWarningTitleBar.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIWarningTitleBar;
            }
        }
        
        public UIYesWindow1 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow1(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow1 UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow1(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIWarningTitleBar;
        
        private UIYesWindow1 mUIYesWindow;
        
        private UINOWindow1 mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYesWindow1 : WinWindow
    {
        
        public UIYesWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINOWindow1 : WinWindow
    {
        
        public UINOWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICircularReferenceErrWindow : WinWindow
    {
        
        public UICircularReferenceErrWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Circular Reference Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Circular Reference Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public WinTitleBar UICircularReferenceErrTitleBar
        {
            get
            {
                if ((this.mUICircularReferenceErrTitleBar == null))
                {
                    this.mUICircularReferenceErrTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICircularReferenceErrTitleBar.WindowTitles.Add("Circular Reference Error");
                    #endregion
                }
                return this.mUICircularReferenceErrTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow2 mUIOKWindow;
        
        private WinTitleBar mUICircularReferenceErrTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Circular Reference Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Circular Reference Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet3Window : WinWindow
    {
        
        public UISpreadsheet3Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet3";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet3");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UISpreadsheet3TitleBar
        {
            get
            {
                if ((this.mUISpreadsheet3TitleBar == null))
                {
                    this.mUISpreadsheet3TitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISpreadsheet3TitleBar.WindowTitles.Add("Spreadsheet3");
                    #endregion
                }
                return this.mUISpreadsheet3TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUISpreadsheet3TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICUsersBasilDocumentsWindow1 : WinWindow
    {
        
        public UICUsersBasilDocumentsWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                "\\saveandopentest.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\saveandopentest.sprd");
            #endregion
        }
        
        #region Properties
        public UICellContentsBoxWindow3 UICellContentsBoxWindow
        {
            get
            {
                if ((this.mUICellContentsBoxWindow == null))
                {
                    this.mUICellContentsBoxWindow = new UICellContentsBoxWindow3(this);
                }
                return this.mUICellContentsBoxWindow;
            }
        }
        
        public WinTitleBar UICUsersBasilDocumentsTitleBar
        {
            get
            {
                if ((this.mUICUsersBasilDocumentsTitleBar == null))
                {
                    this.mUICUsersBasilDocumentsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICUsersBasilDocumentsTitleBar.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                            "\\saveandopentest.sprd");
                    #endregion
                }
                return this.mUICUsersBasilDocumentsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsBoxWindow3 mUICellContentsBoxWindow;
        
        private WinTitleBar mUICUsersBasilDocumentsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellContentsBoxWindow3 : WinWindow
    {
        
        public UICellContentsBoxWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsBox";
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\saveandopentest.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsBoxEdit
        {
            get
            {
                if ((this.mUICellContentsBoxEdit == null))
                {
                    this.mUICellContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "F(x)";
                    this.mUICellContentsBoxEdit.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                            "\\saveandopentest.sprd");
                    #endregion
                }
                return this.mUICellContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICUsersBasilDocumentsWindow2 : WinWindow
    {
        
        public UICUsersBasilDocumentsWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                "\\change.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\change.sprd");
            #endregion
        }
        
        #region Properties
        public UICellContentsBoxWindow4 UICellContentsBoxWindow
        {
            get
            {
                if ((this.mUICellContentsBoxWindow == null))
                {
                    this.mUICellContentsBoxWindow = new UICellContentsBoxWindow4(this);
                }
                return this.mUICellContentsBoxWindow;
            }
        }
        
        public WinTitleBar UICUsersBasilDocumentsTitleBar
        {
            get
            {
                if ((this.mUICUsersBasilDocumentsTitleBar == null))
                {
                    this.mUICUsersBasilDocumentsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICUsersBasilDocumentsTitleBar.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                            "\\change.sprd");
                    #endregion
                }
                return this.mUICUsersBasilDocumentsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICellContentsBoxWindow4 mUICellContentsBoxWindow;
        
        private WinTitleBar mUICUsersBasilDocumentsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellContentsBoxWindow4 : WinWindow
    {
        
        public UICellContentsBoxWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContentsBox";
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\change.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsBoxEdit
        {
            get
            {
                if ((this.mUICellContentsBoxEdit == null))
                {
                    this.mUICellContentsBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "F(x)";
                    this.mUICellContentsBoxEdit.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                            "\\change.sprd");
                    #endregion
                }
                return this.mUICellContentsBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIErrorReadingSpreadshWindow : WinWindow
    {
        
        public UIErrorReadingSpreadshWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Error Reading Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Error Reading Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIOKWindow3 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow3(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow3 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow3 : WinWindow
    {
        
        public UIOKWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Error Reading Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Error Reading Spreadsheet");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICUsersBasilDocumentsWindow3 : WinWindow
    {
        
        public UICUsersBasilDocumentsWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                "\\text.txt.txt";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\text.txt.txt");
            #endregion
        }
        
        #region Properties
        public UIA1Window3 UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window3(this);
                }
                return this.mUIA1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIA1Window3 mUIA1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window3 : WinWindow
    {
        
        public UIA1Window3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellNameBox";
            this.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                    "\\text.txt.txt");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameBoxEdit
        {
            get
            {
                if ((this.mUICellNameBoxEdit == null))
                {
                    this.mUICellNameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameBoxEdit.WindowTitles.Add("C:\\Users\\Basil\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
                            "\\text.txt.txt");
                    #endregion
                }
                return this.mUICellNameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameBoxEdit;
        #endregion
    }
}
