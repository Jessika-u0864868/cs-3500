// Skeleton implementation written by Joe Zachary for CS 3500, September 2013.
// Version 1.1 (Fixed error in comment for RemoveDependency.)
// Method Implementation by Basil Vetas
// Date: September 19, 2014

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SpreadsheetUtilities
{

    /// <summary>
    /// A DependencyGraph can be modeled as a set of ordered pairs of strings.  Two ordered pairs
    /// (s1,t1) and (s2,t2) are considered equal if and only if s1 equals s2 and t1 equals t2.
    /// (Recall that sets never contain duplicates.  If an attempt is made to add an element to a 
    /// set, and the element is already in the set, the set remains unchanged.)
    /// 
    /// Given a DependencyGraph DG:
    /// 
    ///    (1) If s is a string, the set of all strings t such that (s,t) is in DG is called dependents(s).
    ///        
    ///    (2) If s is a string, the set of all strings t such that (t,s) is in DG is called dependees(s).
    //
    // For example, suppose DG = {("a", "b"), ("a", "c"), ("b", "d"), ("d", "d")}
    //     dependents("a") = {"b", "c"}
    //     dependents("b") = {"d"}
    //     dependents("c") = {}
    //     dependents("d") = {"d"}
    //     dependees("a") = {}
    //     dependees("b") = {"a"}
    //     dependees("c") = {"a"}
    //     dependees("d") = {"b", "d"}
    /// </summary>
    public class DependencyGraph
    {
        // will map a dependees to its set of dependents
        private Dictionary<string, HashSet<string>> dependees_map;

        // will map a dependent to its set of dependees
        private Dictionary<string, HashSet<string>> dependents_map;

        // a counter variable that keeps track of the number of ordered         
        // pairs in the dependency graph
        private int dg_size; 

        /// <summary>
        /// Creates an empty DependencyGraph.
        /// </summary>
        public DependencyGraph()
        {
            dependees_map = new Dictionary<string, HashSet<string>>();
            dependents_map = new Dictionary<string, HashSet<string>>();
            dg_size = 0;
        }

        /// <summary>
        /// The number of ordered pairs in the DependencyGraph.
        /// </summary>
        public int Size
        {
            get { return dg_size; }
        }


        /// <summary>
        /// The size of dependees(s).
        /// This property is an example of an indexer.  If dg is a DependencyGraph, you would
        /// invoke it like this:
        /// dg["a"]
        /// It should return the size of dependees("s")
        /// </summary>
        public int this[string s]
        {    
            get 
            { 
                if(dependents_map.ContainsKey(s))
                    return dependents_map[s].Count;
                else
                    return 0; 
            }       
        }

        
        /// <summary>
        /// Reports whether dependents(s) is non-empty.
        /// </summary>
        public bool HasDependents(string s)
        {
            // if the dependees dictionary already contains 's' 
            if (dependees_map.ContainsKey(s))
                return true;
            else
                return false;
        }


        /// <summary>
        /// Reports whether dependees(s) is non-empty.
        /// </summary>
        public bool HasDependees(string s)
        {
            // if the dependents dictionary already contains 's' 
            if (dependents_map.ContainsKey(s))
                return true;
            else
                return false;
        }


        /// <summary>
        /// Enumerates dependents(s).
        /// </summary>
        public IEnumerable<string> GetDependents(string s)
        {
            // if dependees dictionary contains 's'
            if (dependees_map.ContainsKey(s))
            {
                // copy its dependents into an IEnumerable variable                
                return new HashSet<string>(dependees_map[s]); // and return it
            }
            else // otherwise
                return new HashSet<string>();   // return and empty hash set
        }

        /// <summary>
        /// Enumerates dependees(s).
        /// </summary>
        public IEnumerable<string> GetDependees(string s)
        {
            // if dependents dictionary contains 's'
            if(dependents_map.ContainsKey(s))
            {
                // copy its dependees into an IEnumerable variable
                return new HashSet<string>(dependents_map[s]); // and return it
            }
            else // otherwise
                return new HashSet<string>();   // return and empty hash set      
        }


        /// <summary>
        /// Adds the ordered pair (s,t), if it doesn't exist
        /// </summary>
        /// <param name="s"></param>
        /// <param name="t"></param>
        public void AddDependency(string s, string t)
        {
            // if the ordered pair is not already in the dependency graph
            if (!(dependees_map.ContainsKey(s) && dependents_map.ContainsKey(t)))
                dg_size++;  // increment the count

            // if the dependees dictionary already contains 's' 
            if (dependees_map.ContainsKey(s))
            {
                // then just add 't' to the value HashSet of 's'
                dependees_map[s].Add(t);
            }
            else // else if 's' is not in the dictionary
            {
                // create a new HashSet of 'dependents' for 's'
                HashSet<string> dependents = new HashSet<string>();
                dependents.Add(t); // add 't' to the HashSet of 's'
                dependees_map.Add(s, dependents); // add 's' and 'dependents' to the dictionary
            }
            
            // if the dependents dictionary already contains 't'
            if (dependents_map.ContainsKey(t))
            {   
                // then just add 's' t the value HashSet of 't'
                dependents_map[t].Add(s);
            }
            else // else if 't' is not in the dictionary
            {
                // create a new HashSet of 'dependees' for 't'
                HashSet<string> dependees = new HashSet<string>();
                dependees.Add(s); // add 't' to the HashSet of 's'
                dependents_map.Add(t, dependees); // add 't' and 'dependees' to the dictionary
            }  
       
        } // CLOSE AddDependency method


        /// <summary>
        /// Removes the ordered pair (s,t), if it exists
        /// </summary>
        /// <param name="s"></param>
        /// <param name="t"></param>
        public void RemoveDependency(string s, string t)
        {
            // if the ordered pair is in the dependency graph
            if (dependees_map.ContainsKey(s) && dependents_map.ContainsKey(t))
                dg_size--;  // decrement the count

            // if the dependees dictionary contains 's' 
            if (dependees_map.ContainsKey(s))
            {
                // then just remove 't' from the value HashSet of 's'
                dependees_map[s].Remove(t);   
            }

            // if the dependents dictionary contains 't'
            if (dependents_map.ContainsKey(t))
            {
                // then just add 's' t the value HashSet of 't'
                dependents_map[t].Remove(s);
            }

        } // CLOSE RemoveDependency method


        /// <summary>
        /// Removes all existing ordered pairs of the form (s,r).  Then, for each
        /// t in newDependents, adds the ordered pair (s,t).
        /// </summary>
        public void ReplaceDependents(string s, IEnumerable<string> newDependents)
        {
            // new IEnumerable object to hold the old dependents of 's'  
            IEnumerable <string> oldDependents = GetDependents(s);

            // remove each dependent 'r' associated with 's' in the set of oldDependents
            foreach(string r in oldDependents)
                RemoveDependency(s, r); // remove the ordered pair           

            // add each dependent 't' associated with 's' in the set of NewDependents
            foreach (string t in newDependents)
                AddDependency(s, t);
        }


        /// <summary>
        /// Removes all existing ordered pairs of the form (r,s).  Then, for each 
        /// t in newDependees, adds the ordered pair (t,s).
        /// </summary>
        public void ReplaceDependees(string s, IEnumerable<string> newDependees)
        {
            // new IEnumerable object to hold the old dependees of 's'  
            IEnumerable<string> oldDependees = GetDependees(s);

            // remove each dependee 'r' associated with 's' in the set of oldDependees
            foreach (string r in oldDependees)
                RemoveDependency(r, s); // remove the ordered pair           

            // add each dependee 't' associated with 's' in the set of NewDependees
            foreach (string t in newDependees)
                AddDependency(t, s);

        }

    } // CLOSE DependencyGraph class

} // CLOSE SpreadSheetUtilities namespace


