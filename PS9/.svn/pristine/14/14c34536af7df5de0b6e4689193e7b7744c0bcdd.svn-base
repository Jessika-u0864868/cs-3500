using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;
using CustomNetworking;


namespace BC
{
    /// <summary>
    /// The model component of MVC for our Boggle Client.
    /// </summary>
    public class BoggleClientModel
    {
        /// <summary>
        /// Not sure if we need this.
        /// </summary>
        public static void Main()
        {
            Console.ReadLine();
        }
        /// <summary>
        /// The socket used to communicate with the server.  If no connection has been
        /// made yet, this is null.
        /// </summary>
        private StringSocket socket;

        /// <summary>
        /// An event specifically to handle the updates from the timer
        /// </summary>
        public event Action<String> IncomingTimerEvent;

        /// <summary>
        /// An event to handle all other communication from the Boggle Server
        /// </summary>
        public event Action<String> ServerResponseEvent;

        /// <summary>
        /// May need this more general event
        /// </summary>
        public event Action<String> StartLineEvent;

        /// <summary>
        /// May need this more general event
        /// </summary>
        public event Action<String> TimeLineEvent;

        /// <summary>
        /// May need this more general event
        /// </summary>
        public event Action<String> ScoreLineEvent;

        /// <summary>
        /// May need this more general event
        /// </summary>
        public event Action<String> StopLineEvent;

        /// <summary>
        /// May need this more general event
        /// </summary>
        public event Action<String> TerminatedLineEvent;

        /// <summary>
        /// May need this more general event
        /// </summary>
        public event Action<String> IgnoreLineEvent;

        /// <summary>
        /// Constructor creates a BoggleClientModel
        /// </summary>
        public BoggleClientModel()
        {
            socket = null;
        }

        /// <summary>
        /// Connect to the server at the given hostname and port and with the give name.
        /// </summary>
        public void Connect(string hostname)
        {
            if (socket == null)
            {
                // connect to port 2000 (Boggle Server port)
                TcpClient client = new TcpClient(hostname, 2000);
                socket = new StringSocket(client.Client, UTF8Encoding.Default);
                socket.BeginReceive(LineReceived, null);
            }
        }

        public void SendPlayerName(string name)
        {
            if(!ReferenceEquals(socket, null))
            {
                socket.BeginSend("PLAY " + name + "\n", (ex, p) => { }, null);
            }
        }

        /// <summary>
        /// Sends a word from the client to the server
        /// </summary>
        /// <param name="word"></param>
        public void SendWord(String word)
        {
            if (!ReferenceEquals(socket, null))
            {
                socket.BeginSend("WORD " + word + "\n", (e, p) => { }, null);
            }
        }

        /// <summary>
        /// Handles an arriving line of text.
        /// </summary>
        /// <param name="s"></param>
        /// <param name="e"></param>
        /// <param name="p"></param>
        public void LineReceived(String s, Exception e, object p)
        {
            // check what the string starts with and then execute the appropriate 
            // action in the GUI

            if(s.StartsWith("START "))
            {
                if (!ReferenceEquals(StartLineEvent, null))
                {
                    StartLineEvent(s.Substring(6));
                }
            }
            else if (s.StartsWith("TIME "))
            {
                if (!ReferenceEquals(TimeLineEvent, null))
                {
                    TimeLineEvent(s.Substring(5));
                }
            }
            else if (s.StartsWith("SCORE "))
            {
                if (!ReferenceEquals(ScoreLineEvent, null))
                {
                    ScoreLineEvent(s.Substring(6));
                }
            }
            else if (s.StartsWith("STOP "))
            {
                if (!ReferenceEquals(StopLineEvent, null))
                {
                    StopLineEvent(s.Substring(5));
                }
            }
            else if (s.StartsWith("TERMINATED"))
            {
                //if (!ReferenceEquals(TerminatedLineEvent, null))
                //{
                //    TerminatedLineEvent(s.Substring(10));
                //}
            }
            else if (s.StartsWith("IGNORING "))
            {
                //if (!ReferenceEquals(IgnoreLineEvent, null))
                //{
                //    IgnoreLineEvent(s.Substring(9));
                //}
            }           
            
            socket.BeginReceive(LineReceived, null);
        }
    }
}
